
serial_stopwatch_8_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004838  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  080049d8  080049d8  000149d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004aec  08004aec  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004aec  08004aec  00014aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004af4  08004af4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004af4  08004af4  00014af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004af8  08004af8  00014af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000070  08004b6c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08004b6c  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd3a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa2  00000000  00000000  0002ddda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  0002fd80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c68  00000000  00000000  00030aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017573  00000000  00000000  00031708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d45a  00000000  00000000  00048c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fa9f  00000000  00000000  000560d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e5b74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f90  00000000  00000000  000e5bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080049c0 	.word	0x080049c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080049c0 	.word	0x080049c0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_d2uiz>:
 8000628:	004a      	lsls	r2, r1, #1
 800062a:	d211      	bcs.n	8000650 <__aeabi_d2uiz+0x28>
 800062c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000630:	d211      	bcs.n	8000656 <__aeabi_d2uiz+0x2e>
 8000632:	d50d      	bpl.n	8000650 <__aeabi_d2uiz+0x28>
 8000634:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000638:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800063c:	d40e      	bmi.n	800065c <__aeabi_d2uiz+0x34>
 800063e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000642:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000646:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800064a:	fa23 f002 	lsr.w	r0, r3, r2
 800064e:	4770      	bx	lr
 8000650:	f04f 0000 	mov.w	r0, #0
 8000654:	4770      	bx	lr
 8000656:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800065a:	d102      	bne.n	8000662 <__aeabi_d2uiz+0x3a>
 800065c:	f04f 30ff 	mov.w	r0, #4294967295
 8000660:	4770      	bx	lr
 8000662:	f04f 0000 	mov.w	r0, #0
 8000666:	4770      	bx	lr

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b96e 	b.w	800095c <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f806 	bl	8000698 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__udivmoddi4>:
 8000698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800069c:	9d08      	ldr	r5, [sp, #32]
 800069e:	4604      	mov	r4, r0
 80006a0:	468c      	mov	ip, r1
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	f040 8083 	bne.w	80007ae <__udivmoddi4+0x116>
 80006a8:	428a      	cmp	r2, r1
 80006aa:	4617      	mov	r7, r2
 80006ac:	d947      	bls.n	800073e <__udivmoddi4+0xa6>
 80006ae:	fab2 f282 	clz	r2, r2
 80006b2:	b142      	cbz	r2, 80006c6 <__udivmoddi4+0x2e>
 80006b4:	f1c2 0020 	rsb	r0, r2, #32
 80006b8:	fa24 f000 	lsr.w	r0, r4, r0
 80006bc:	4091      	lsls	r1, r2
 80006be:	4097      	lsls	r7, r2
 80006c0:	ea40 0c01 	orr.w	ip, r0, r1
 80006c4:	4094      	lsls	r4, r2
 80006c6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80006ca:	0c23      	lsrs	r3, r4, #16
 80006cc:	fbbc f6f8 	udiv	r6, ip, r8
 80006d0:	fa1f fe87 	uxth.w	lr, r7
 80006d4:	fb08 c116 	mls	r1, r8, r6, ip
 80006d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006dc:	fb06 f10e 	mul.w	r1, r6, lr
 80006e0:	4299      	cmp	r1, r3
 80006e2:	d909      	bls.n	80006f8 <__udivmoddi4+0x60>
 80006e4:	18fb      	adds	r3, r7, r3
 80006e6:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ea:	f080 8119 	bcs.w	8000920 <__udivmoddi4+0x288>
 80006ee:	4299      	cmp	r1, r3
 80006f0:	f240 8116 	bls.w	8000920 <__udivmoddi4+0x288>
 80006f4:	3e02      	subs	r6, #2
 80006f6:	443b      	add	r3, r7
 80006f8:	1a5b      	subs	r3, r3, r1
 80006fa:	b2a4      	uxth	r4, r4
 80006fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000700:	fb08 3310 	mls	r3, r8, r0, r3
 8000704:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000708:	fb00 fe0e 	mul.w	lr, r0, lr
 800070c:	45a6      	cmp	lr, r4
 800070e:	d909      	bls.n	8000724 <__udivmoddi4+0x8c>
 8000710:	193c      	adds	r4, r7, r4
 8000712:	f100 33ff 	add.w	r3, r0, #4294967295
 8000716:	f080 8105 	bcs.w	8000924 <__udivmoddi4+0x28c>
 800071a:	45a6      	cmp	lr, r4
 800071c:	f240 8102 	bls.w	8000924 <__udivmoddi4+0x28c>
 8000720:	3802      	subs	r0, #2
 8000722:	443c      	add	r4, r7
 8000724:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000728:	eba4 040e 	sub.w	r4, r4, lr
 800072c:	2600      	movs	r6, #0
 800072e:	b11d      	cbz	r5, 8000738 <__udivmoddi4+0xa0>
 8000730:	40d4      	lsrs	r4, r2
 8000732:	2300      	movs	r3, #0
 8000734:	e9c5 4300 	strd	r4, r3, [r5]
 8000738:	4631      	mov	r1, r6
 800073a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073e:	b902      	cbnz	r2, 8000742 <__udivmoddi4+0xaa>
 8000740:	deff      	udf	#255	; 0xff
 8000742:	fab2 f282 	clz	r2, r2
 8000746:	2a00      	cmp	r2, #0
 8000748:	d150      	bne.n	80007ec <__udivmoddi4+0x154>
 800074a:	1bcb      	subs	r3, r1, r7
 800074c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000750:	fa1f f887 	uxth.w	r8, r7
 8000754:	2601      	movs	r6, #1
 8000756:	fbb3 fcfe 	udiv	ip, r3, lr
 800075a:	0c21      	lsrs	r1, r4, #16
 800075c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000760:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000764:	fb08 f30c 	mul.w	r3, r8, ip
 8000768:	428b      	cmp	r3, r1
 800076a:	d907      	bls.n	800077c <__udivmoddi4+0xe4>
 800076c:	1879      	adds	r1, r7, r1
 800076e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000772:	d202      	bcs.n	800077a <__udivmoddi4+0xe2>
 8000774:	428b      	cmp	r3, r1
 8000776:	f200 80e9 	bhi.w	800094c <__udivmoddi4+0x2b4>
 800077a:	4684      	mov	ip, r0
 800077c:	1ac9      	subs	r1, r1, r3
 800077e:	b2a3      	uxth	r3, r4
 8000780:	fbb1 f0fe 	udiv	r0, r1, lr
 8000784:	fb0e 1110 	mls	r1, lr, r0, r1
 8000788:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800078c:	fb08 f800 	mul.w	r8, r8, r0
 8000790:	45a0      	cmp	r8, r4
 8000792:	d907      	bls.n	80007a4 <__udivmoddi4+0x10c>
 8000794:	193c      	adds	r4, r7, r4
 8000796:	f100 33ff 	add.w	r3, r0, #4294967295
 800079a:	d202      	bcs.n	80007a2 <__udivmoddi4+0x10a>
 800079c:	45a0      	cmp	r8, r4
 800079e:	f200 80d9 	bhi.w	8000954 <__udivmoddi4+0x2bc>
 80007a2:	4618      	mov	r0, r3
 80007a4:	eba4 0408 	sub.w	r4, r4, r8
 80007a8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007ac:	e7bf      	b.n	800072e <__udivmoddi4+0x96>
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d909      	bls.n	80007c6 <__udivmoddi4+0x12e>
 80007b2:	2d00      	cmp	r5, #0
 80007b4:	f000 80b1 	beq.w	800091a <__udivmoddi4+0x282>
 80007b8:	2600      	movs	r6, #0
 80007ba:	e9c5 0100 	strd	r0, r1, [r5]
 80007be:	4630      	mov	r0, r6
 80007c0:	4631      	mov	r1, r6
 80007c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c6:	fab3 f683 	clz	r6, r3
 80007ca:	2e00      	cmp	r6, #0
 80007cc:	d14a      	bne.n	8000864 <__udivmoddi4+0x1cc>
 80007ce:	428b      	cmp	r3, r1
 80007d0:	d302      	bcc.n	80007d8 <__udivmoddi4+0x140>
 80007d2:	4282      	cmp	r2, r0
 80007d4:	f200 80b8 	bhi.w	8000948 <__udivmoddi4+0x2b0>
 80007d8:	1a84      	subs	r4, r0, r2
 80007da:	eb61 0103 	sbc.w	r1, r1, r3
 80007de:	2001      	movs	r0, #1
 80007e0:	468c      	mov	ip, r1
 80007e2:	2d00      	cmp	r5, #0
 80007e4:	d0a8      	beq.n	8000738 <__udivmoddi4+0xa0>
 80007e6:	e9c5 4c00 	strd	r4, ip, [r5]
 80007ea:	e7a5      	b.n	8000738 <__udivmoddi4+0xa0>
 80007ec:	f1c2 0320 	rsb	r3, r2, #32
 80007f0:	fa20 f603 	lsr.w	r6, r0, r3
 80007f4:	4097      	lsls	r7, r2
 80007f6:	fa01 f002 	lsl.w	r0, r1, r2
 80007fa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007fe:	40d9      	lsrs	r1, r3
 8000800:	4330      	orrs	r0, r6
 8000802:	0c03      	lsrs	r3, r0, #16
 8000804:	fbb1 f6fe 	udiv	r6, r1, lr
 8000808:	fa1f f887 	uxth.w	r8, r7
 800080c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000810:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000814:	fb06 f108 	mul.w	r1, r6, r8
 8000818:	4299      	cmp	r1, r3
 800081a:	fa04 f402 	lsl.w	r4, r4, r2
 800081e:	d909      	bls.n	8000834 <__udivmoddi4+0x19c>
 8000820:	18fb      	adds	r3, r7, r3
 8000822:	f106 3cff 	add.w	ip, r6, #4294967295
 8000826:	f080 808d 	bcs.w	8000944 <__udivmoddi4+0x2ac>
 800082a:	4299      	cmp	r1, r3
 800082c:	f240 808a 	bls.w	8000944 <__udivmoddi4+0x2ac>
 8000830:	3e02      	subs	r6, #2
 8000832:	443b      	add	r3, r7
 8000834:	1a5b      	subs	r3, r3, r1
 8000836:	b281      	uxth	r1, r0
 8000838:	fbb3 f0fe 	udiv	r0, r3, lr
 800083c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000840:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000844:	fb00 f308 	mul.w	r3, r0, r8
 8000848:	428b      	cmp	r3, r1
 800084a:	d907      	bls.n	800085c <__udivmoddi4+0x1c4>
 800084c:	1879      	adds	r1, r7, r1
 800084e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000852:	d273      	bcs.n	800093c <__udivmoddi4+0x2a4>
 8000854:	428b      	cmp	r3, r1
 8000856:	d971      	bls.n	800093c <__udivmoddi4+0x2a4>
 8000858:	3802      	subs	r0, #2
 800085a:	4439      	add	r1, r7
 800085c:	1acb      	subs	r3, r1, r3
 800085e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000862:	e778      	b.n	8000756 <__udivmoddi4+0xbe>
 8000864:	f1c6 0c20 	rsb	ip, r6, #32
 8000868:	fa03 f406 	lsl.w	r4, r3, r6
 800086c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000870:	431c      	orrs	r4, r3
 8000872:	fa20 f70c 	lsr.w	r7, r0, ip
 8000876:	fa01 f306 	lsl.w	r3, r1, r6
 800087a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800087e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000882:	431f      	orrs	r7, r3
 8000884:	0c3b      	lsrs	r3, r7, #16
 8000886:	fbb1 f9fe 	udiv	r9, r1, lr
 800088a:	fa1f f884 	uxth.w	r8, r4
 800088e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000892:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000896:	fb09 fa08 	mul.w	sl, r9, r8
 800089a:	458a      	cmp	sl, r1
 800089c:	fa02 f206 	lsl.w	r2, r2, r6
 80008a0:	fa00 f306 	lsl.w	r3, r0, r6
 80008a4:	d908      	bls.n	80008b8 <__udivmoddi4+0x220>
 80008a6:	1861      	adds	r1, r4, r1
 80008a8:	f109 30ff 	add.w	r0, r9, #4294967295
 80008ac:	d248      	bcs.n	8000940 <__udivmoddi4+0x2a8>
 80008ae:	458a      	cmp	sl, r1
 80008b0:	d946      	bls.n	8000940 <__udivmoddi4+0x2a8>
 80008b2:	f1a9 0902 	sub.w	r9, r9, #2
 80008b6:	4421      	add	r1, r4
 80008b8:	eba1 010a 	sub.w	r1, r1, sl
 80008bc:	b2bf      	uxth	r7, r7
 80008be:	fbb1 f0fe 	udiv	r0, r1, lr
 80008c2:	fb0e 1110 	mls	r1, lr, r0, r1
 80008c6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80008ca:	fb00 f808 	mul.w	r8, r0, r8
 80008ce:	45b8      	cmp	r8, r7
 80008d0:	d907      	bls.n	80008e2 <__udivmoddi4+0x24a>
 80008d2:	19e7      	adds	r7, r4, r7
 80008d4:	f100 31ff 	add.w	r1, r0, #4294967295
 80008d8:	d22e      	bcs.n	8000938 <__udivmoddi4+0x2a0>
 80008da:	45b8      	cmp	r8, r7
 80008dc:	d92c      	bls.n	8000938 <__udivmoddi4+0x2a0>
 80008de:	3802      	subs	r0, #2
 80008e0:	4427      	add	r7, r4
 80008e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008e6:	eba7 0708 	sub.w	r7, r7, r8
 80008ea:	fba0 8902 	umull	r8, r9, r0, r2
 80008ee:	454f      	cmp	r7, r9
 80008f0:	46c6      	mov	lr, r8
 80008f2:	4649      	mov	r1, r9
 80008f4:	d31a      	bcc.n	800092c <__udivmoddi4+0x294>
 80008f6:	d017      	beq.n	8000928 <__udivmoddi4+0x290>
 80008f8:	b15d      	cbz	r5, 8000912 <__udivmoddi4+0x27a>
 80008fa:	ebb3 020e 	subs.w	r2, r3, lr
 80008fe:	eb67 0701 	sbc.w	r7, r7, r1
 8000902:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000906:	40f2      	lsrs	r2, r6
 8000908:	ea4c 0202 	orr.w	r2, ip, r2
 800090c:	40f7      	lsrs	r7, r6
 800090e:	e9c5 2700 	strd	r2, r7, [r5]
 8000912:	2600      	movs	r6, #0
 8000914:	4631      	mov	r1, r6
 8000916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800091a:	462e      	mov	r6, r5
 800091c:	4628      	mov	r0, r5
 800091e:	e70b      	b.n	8000738 <__udivmoddi4+0xa0>
 8000920:	4606      	mov	r6, r0
 8000922:	e6e9      	b.n	80006f8 <__udivmoddi4+0x60>
 8000924:	4618      	mov	r0, r3
 8000926:	e6fd      	b.n	8000724 <__udivmoddi4+0x8c>
 8000928:	4543      	cmp	r3, r8
 800092a:	d2e5      	bcs.n	80008f8 <__udivmoddi4+0x260>
 800092c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000930:	eb69 0104 	sbc.w	r1, r9, r4
 8000934:	3801      	subs	r0, #1
 8000936:	e7df      	b.n	80008f8 <__udivmoddi4+0x260>
 8000938:	4608      	mov	r0, r1
 800093a:	e7d2      	b.n	80008e2 <__udivmoddi4+0x24a>
 800093c:	4660      	mov	r0, ip
 800093e:	e78d      	b.n	800085c <__udivmoddi4+0x1c4>
 8000940:	4681      	mov	r9, r0
 8000942:	e7b9      	b.n	80008b8 <__udivmoddi4+0x220>
 8000944:	4666      	mov	r6, ip
 8000946:	e775      	b.n	8000834 <__udivmoddi4+0x19c>
 8000948:	4630      	mov	r0, r6
 800094a:	e74a      	b.n	80007e2 <__udivmoddi4+0x14a>
 800094c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000950:	4439      	add	r1, r7
 8000952:	e713      	b.n	800077c <__udivmoddi4+0xe4>
 8000954:	3802      	subs	r0, #2
 8000956:	443c      	add	r4, r7
 8000958:	e724      	b.n	80007a4 <__udivmoddi4+0x10c>
 800095a:	bf00      	nop

0800095c <__aeabi_idiv0>:
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop

08000960 <__io_putchar>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE {
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	/* Implementation of fputc to UART1 */
	HAL_UART_Transmit(&huart1, (unsigned char*) &ch, 1, 0xFFFF);
 8000968:	1d39      	adds	r1, r7, #4
 800096a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800096e:	2201      	movs	r2, #1
 8000970:	4803      	ldr	r0, [pc, #12]	; (8000980 <__io_putchar+0x20>)
 8000972:	f002 fc3c 	bl	80031ee <HAL_UART_Transmit>
	return ch;
 8000976:	687b      	ldr	r3, [r7, #4]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000200 	.word	0x20000200

08000984 <resume>:

void resume() {
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2); // Start TIM2
 8000988:	4802      	ldr	r0, [pc, #8]	; (8000994 <resume+0x10>)
 800098a:	f001 ffc1 	bl	8002910 <HAL_TIM_Base_Start_IT>
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000244 	.word	0x20000244

08000998 <start>:


void start() {
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	//Reset stopwatch and start timer
	msTicks = 0;
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <start+0x14>)
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
	resume();
 80009a2:	f7ff ffef 	bl	8000984 <resume>
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000190 	.word	0x20000190

080009b0 <stop>:

void stop() {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim2); // Stop TIM2
 80009b4:	4802      	ldr	r0, [pc, #8]	; (80009c0 <stop+0x10>)
 80009b6:	f002 f80d 	bl	80029d4 <HAL_TIM_Base_Stop_IT>
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000244 	.word	0x20000244

080009c4 <handle_command>:
/**
 * @brief  Handle complete terminal input.
 * @retval void
 */
void handle_command() {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	if (!strcmp(UART1_Buffer, "start"))
 80009c8:	4911      	ldr	r1, [pc, #68]	; (8000a10 <handle_command+0x4c>)
 80009ca:	4812      	ldr	r0, [pc, #72]	; (8000a14 <handle_command+0x50>)
 80009cc:	f7ff fc08 	bl	80001e0 <strcmp>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d102      	bne.n	80009dc <handle_command+0x18>
		start();
 80009d6:	f7ff ffdf 	bl	8000998 <start>
	else if (!strcmp(UART1_Buffer, "continue"))
		resume(); // Start TIM2
	else
		printf("\r\nCommand unknown!");

}
 80009da:	e016      	b.n	8000a0a <handle_command+0x46>
	else if (!strcmp(UART1_Buffer, "stop"))
 80009dc:	490e      	ldr	r1, [pc, #56]	; (8000a18 <handle_command+0x54>)
 80009de:	480d      	ldr	r0, [pc, #52]	; (8000a14 <handle_command+0x50>)
 80009e0:	f7ff fbfe 	bl	80001e0 <strcmp>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d102      	bne.n	80009f0 <handle_command+0x2c>
		stop();
 80009ea:	f7ff ffe1 	bl	80009b0 <stop>
}
 80009ee:	e00c      	b.n	8000a0a <handle_command+0x46>
	else if (!strcmp(UART1_Buffer, "continue"))
 80009f0:	490a      	ldr	r1, [pc, #40]	; (8000a1c <handle_command+0x58>)
 80009f2:	4808      	ldr	r0, [pc, #32]	; (8000a14 <handle_command+0x50>)
 80009f4:	f7ff fbf4 	bl	80001e0 <strcmp>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d102      	bne.n	8000a04 <handle_command+0x40>
		resume(); // Start TIM2
 80009fe:	f7ff ffc1 	bl	8000984 <resume>
}
 8000a02:	e002      	b.n	8000a0a <handle_command+0x46>
		printf("\r\nCommand unknown!");
 8000a04:	4806      	ldr	r0, [pc, #24]	; (8000a20 <handle_command+0x5c>)
 8000a06:	f003 fae9 	bl	8003fdc <iprintf>
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	080049d8 	.word	0x080049d8
 8000a14:	20000090 	.word	0x20000090
 8000a18:	080049e0 	.word	0x080049e0
 8000a1c:	080049e8 	.word	0x080049e8
 8000a20:	080049f4 	.word	0x080049f4

08000a24 <HAL_UART_RxCpltCallback>:

/**
 * @brief  Handle UART RX from terminal via DMA.
 * @retval void
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	//Current length of read characters
	size_t cur_len = strlen(UART1_Buffer);
 8000a2c:	4818      	ldr	r0, [pc, #96]	; (8000a90 <HAL_UART_RxCpltCallback+0x6c>)
 8000a2e:	f7ff fbe1 	bl	80001f4 <strlen>
 8000a32:	60f8      	str	r0, [r7, #12]

	switch (*UART1_rxBuffer) {
 8000a34:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <HAL_UART_RxCpltCallback+0x70>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b0d      	cmp	r3, #13
 8000a3a:	d002      	beq.n	8000a42 <HAL_UART_RxCpltCallback+0x1e>
 8000a3c:	2b7f      	cmp	r3, #127	; 0x7f
 8000a3e:	d009      	beq.n	8000a54 <HAL_UART_RxCpltCallback+0x30>
 8000a40:	e011      	b.n	8000a66 <HAL_UART_RxCpltCallback+0x42>
	case '\r':
		// User has pressed "Enter" in the Terminal, so a command has been completed
		handle_command();
 8000a42:	f7ff ffbf 	bl	80009c4 <handle_command>
		// Clear the buffer
		memset(UART1_Buffer, 0, sizeof UART1_Buffer);
 8000a46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4810      	ldr	r0, [pc, #64]	; (8000a90 <HAL_UART_RxCpltCallback+0x6c>)
 8000a4e:	f003 fa12 	bl	8003e76 <memset>
		// Move the cursor on the terminal to a new line
		//printf("\n");
		break;
 8000a52:	e014      	b.n	8000a7e <HAL_UART_RxCpltCallback+0x5a>
	case '\177':
		// Backspace received, so one char from the buffer has to be removed
		if (cur_len > 0)
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d010      	beq.n	8000a7c <HAL_UART_RxCpltCallback+0x58>
			UART1_Buffer[cur_len - 1] = '\0';
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	3b01      	subs	r3, #1
 8000a5e:	4a0c      	ldr	r2, [pc, #48]	; (8000a90 <HAL_UART_RxCpltCallback+0x6c>)
 8000a60:	2100      	movs	r1, #0
 8000a62:	54d1      	strb	r1, [r2, r3]
		break;
 8000a64:	e00a      	b.n	8000a7c <HAL_UART_RxCpltCallback+0x58>
	default:
		// Put the received char into the next slot of the buffer
		if (cur_len < 254) {
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	2bfd      	cmp	r3, #253	; 0xfd
 8000a6a:	d808      	bhi.n	8000a7e <HAL_UART_RxCpltCallback+0x5a>
			UART1_Buffer[cur_len] = *UART1_rxBuffer;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <HAL_UART_RxCpltCallback+0x70>)
 8000a6e:	7819      	ldrb	r1, [r3, #0]
 8000a70:	4a07      	ldr	r2, [pc, #28]	; (8000a90 <HAL_UART_RxCpltCallback+0x6c>)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	4413      	add	r3, r2
 8000a76:	460a      	mov	r2, r1
 8000a78:	701a      	strb	r2, [r3, #0]
 8000a7a:	e000      	b.n	8000a7e <HAL_UART_RxCpltCallback+0x5a>
		break;
 8000a7c:	bf00      	nop
		}
	}
	// Return the current character to the terminal
	//HAL_UART_Transmit(&huart1, UART1_rxBuffer, 1, 100);
	// Setup for the next character
	HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, 1);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	4904      	ldr	r1, [pc, #16]	; (8000a94 <HAL_UART_RxCpltCallback+0x70>)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <HAL_UART_RxCpltCallback+0x74>)
 8000a84:	f002 fc45 	bl	8003312 <HAL_UART_Receive_DMA>
}
 8000a88:	bf00      	nop
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000090 	.word	0x20000090
 8000a94:	2000008c 	.word	0x2000008c
 8000a98:	20000200 	.word	0x20000200

08000a9c <HAL_TIM_PeriodElapsedCallback>:

/**
 * @brief  Handle Timer wrap event.
 * @retval void
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	msTicks++;
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	4a04      	ldr	r2, [pc, #16]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aac:	6013      	str	r3, [r2, #0]
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000190 	.word	0x20000190

08000ac0 <HAL_GPIO_EXTI_Callback>:

/**
 * @brief  Handle interrupt for buttons.
 * @retval void
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	80fb      	strh	r3, [r7, #6]

	switch(GPIO_Pin){
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	2b04      	cmp	r3, #4
 8000ace:	d00c      	beq.n	8000aea <HAL_GPIO_EXTI_Callback+0x2a>
 8000ad0:	2b04      	cmp	r3, #4
 8000ad2:	dc0c      	bgt.n	8000aee <HAL_GPIO_EXTI_Callback+0x2e>
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d002      	beq.n	8000ade <HAL_GPIO_EXTI_Callback+0x1e>
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d003      	beq.n	8000ae4 <HAL_GPIO_EXTI_Callback+0x24>
		resume();
		break;
	case BUTTON_LEFT:
		stop();
	default:
		break;
 8000adc:	e007      	b.n	8000aee <HAL_GPIO_EXTI_Callback+0x2e>
		start();
 8000ade:	f7ff ff5b 	bl	8000998 <start>
		break;
 8000ae2:	e005      	b.n	8000af0 <HAL_GPIO_EXTI_Callback+0x30>
		resume();
 8000ae4:	f7ff ff4e 	bl	8000984 <resume>
		break;
 8000ae8:	e002      	b.n	8000af0 <HAL_GPIO_EXTI_Callback+0x30>
		stop();
 8000aea:	f7ff ff61 	bl	80009b0 <stop>
		break;
 8000aee:	bf00      	nop
	}

}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af8:	b590      	push	{r4, r7, lr}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000afe:	f000 fbbb 	bl	8001278 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b02:	f000 f871 	bl	8000be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b06:	f000 f96d 	bl	8000de4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b0a:	f000 f94b 	bl	8000da4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000b0e:	f000 f91f 	bl	8000d50 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000b12:	f000 f8d1 	bl	8000cb8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, 1); //Setup UART DMA to receive first Byte
 8000b16:	2201      	movs	r2, #1
 8000b18:	4928      	ldr	r1, [pc, #160]	; (8000bbc <main+0xc4>)
 8000b1a:	4829      	ldr	r0, [pc, #164]	; (8000bc0 <main+0xc8>)
 8000b1c:	f002 fbf9 	bl	8003312 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		//Routine to print output to Terminal
		HAL_Delay(50);
 8000b20:	2032      	movs	r0, #50	; 0x32
 8000b22:	f000 fc1b 	bl	800135c <HAL_Delay>
		printf("%c%c%c%c", 0x1B, 0x5B, 0x32, 0x4A); // Clear screen
 8000b26:	234a      	movs	r3, #74	; 0x4a
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	2332      	movs	r3, #50	; 0x32
 8000b2c:	225b      	movs	r2, #91	; 0x5b
 8000b2e:	211b      	movs	r1, #27
 8000b30:	4824      	ldr	r0, [pc, #144]	; (8000bc4 <main+0xcc>)
 8000b32:	f003 fa53 	bl	8003fdc <iprintf>
		printf("\r%02lu:%02lu,%03lu\r\n", (uint32_t) floor(msTicks / 60000), (uint32_t) floor(msTicks / 1000) % 60, (uint32_t) msTicks % 1000); // Print the stopwatch
 8000b36:	4b24      	ldr	r3, [pc, #144]	; (8000bc8 <main+0xd0>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a24      	ldr	r2, [pc, #144]	; (8000bcc <main+0xd4>)
 8000b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b40:	0b9b      	lsrs	r3, r3, #14
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fcf6 	bl	8000534 <__aeabi_ui2d>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	4610      	mov	r0, r2
 8000b4e:	4619      	mov	r1, r3
 8000b50:	f7ff fd6a 	bl	8000628 <__aeabi_d2uiz>
 8000b54:	4604      	mov	r4, r0
 8000b56:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <main+0xd0>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a1d      	ldr	r2, [pc, #116]	; (8000bd0 <main+0xd8>)
 8000b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b60:	099b      	lsrs	r3, r3, #6
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fce6 	bl	8000534 <__aeabi_ui2d>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	4610      	mov	r0, r2
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f7ff fd5a 	bl	8000628 <__aeabi_d2uiz>
 8000b74:	4601      	mov	r1, r0
 8000b76:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <main+0xdc>)
 8000b78:	fba3 2301 	umull	r2, r3, r3, r1
 8000b7c:	095a      	lsrs	r2, r3, #5
 8000b7e:	4613      	mov	r3, r2
 8000b80:	011b      	lsls	r3, r3, #4
 8000b82:	1a9b      	subs	r3, r3, r2
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	1aca      	subs	r2, r1, r3
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <main+0xd0>)
 8000b8a:	6819      	ldr	r1, [r3, #0]
 8000b8c:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <main+0xd8>)
 8000b8e:	fba3 0301 	umull	r0, r3, r3, r1
 8000b92:	099b      	lsrs	r3, r3, #6
 8000b94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b98:	fb00 f303 	mul.w	r3, r0, r3
 8000b9c:	1acb      	subs	r3, r1, r3
 8000b9e:	4621      	mov	r1, r4
 8000ba0:	480d      	ldr	r0, [pc, #52]	; (8000bd8 <main+0xe0>)
 8000ba2:	f003 fa1b 	bl	8003fdc <iprintf>
		printf("~> %s", UART1_Buffer); // Print the currently entered command
 8000ba6:	490d      	ldr	r1, [pc, #52]	; (8000bdc <main+0xe4>)
 8000ba8:	480d      	ldr	r0, [pc, #52]	; (8000be0 <main+0xe8>)
 8000baa:	f003 fa17 	bl	8003fdc <iprintf>
		fflush(stdout); // Flush the output to show the command in the last row with the cursor
 8000bae:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <main+0xec>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f003 f82f 	bl	8003c18 <fflush>
		HAL_Delay(50);
 8000bba:	e7b1      	b.n	8000b20 <main+0x28>
 8000bbc:	2000008c 	.word	0x2000008c
 8000bc0:	20000200 	.word	0x20000200
 8000bc4:	08004a08 	.word	0x08004a08
 8000bc8:	20000190 	.word	0x20000190
 8000bcc:	45e7b273 	.word	0x45e7b273
 8000bd0:	10624dd3 	.word	0x10624dd3
 8000bd4:	88888889 	.word	0x88888889
 8000bd8:	08004a14 	.word	0x08004a14
 8000bdc:	20000090 	.word	0x20000090
 8000be0:	08004a2c 	.word	0x08004a2c
 8000be4:	2000000c 	.word	0x2000000c

08000be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b094      	sub	sp, #80	; 0x50
 8000bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bee:	f107 0320 	add.w	r3, r7, #32
 8000bf2:	2230      	movs	r2, #48	; 0x30
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f003 f93d 	bl	8003e76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	4b27      	ldr	r3, [pc, #156]	; (8000cb0 <SystemClock_Config+0xc8>)
 8000c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c14:	4a26      	ldr	r2, [pc, #152]	; (8000cb0 <SystemClock_Config+0xc8>)
 8000c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1c:	4b24      	ldr	r3, [pc, #144]	; (8000cb0 <SystemClock_Config+0xc8>)
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	4b21      	ldr	r3, [pc, #132]	; (8000cb4 <SystemClock_Config+0xcc>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a20      	ldr	r2, [pc, #128]	; (8000cb4 <SystemClock_Config+0xcc>)
 8000c32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c36:	6013      	str	r3, [r2, #0]
 8000c38:	4b1e      	ldr	r3, [pc, #120]	; (8000cb4 <SystemClock_Config+0xcc>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c44:	2302      	movs	r3, #2
 8000c46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c4c:	2310      	movs	r3, #16
 8000c4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c50:	2302      	movs	r3, #2
 8000c52:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c54:	2300      	movs	r3, #0
 8000c56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c58:	2308      	movs	r3, #8
 8000c5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000c5c:	2364      	movs	r3, #100	; 0x64
 8000c5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c60:	2302      	movs	r3, #2
 8000c62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c64:	2304      	movs	r3, #4
 8000c66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c68:	f107 0320 	add.w	r3, r7, #32
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f001 f9b7 	bl	8001fe0 <HAL_RCC_OscConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c78:	f000 f8fa 	bl	8000e70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c80:	2302      	movs	r3, #2
 8000c82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c92:	f107 030c 	add.w	r3, r7, #12
 8000c96:	2103      	movs	r1, #3
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f001 fc19 	bl	80024d0 <HAL_RCC_ClockConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ca4:	f000 f8e4 	bl	8000e70 <Error_Handler>
  }
}
 8000ca8:	bf00      	nop
 8000caa:	3750      	adds	r7, #80	; 0x50
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40007000 	.word	0x40007000

08000cb8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cbe:	f107 0308 	add.w	r3, r7, #8
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ccc:	463b      	mov	r3, r7
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <MX_TIM2_Init+0x94>)
 8000cd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	; (8000d4c <MX_TIM2_Init+0x94>)
 8000cde:	2264      	movs	r2, #100	; 0x64
 8000ce0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce2:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <MX_TIM2_Init+0x94>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000ce8:	4b18      	ldr	r3, [pc, #96]	; (8000d4c <MX_TIM2_Init+0x94>)
 8000cea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf0:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <MX_TIM2_Init+0x94>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <MX_TIM2_Init+0x94>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cfc:	4813      	ldr	r0, [pc, #76]	; (8000d4c <MX_TIM2_Init+0x94>)
 8000cfe:	f001 fdb7 	bl	8002870 <HAL_TIM_Base_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d08:	f000 f8b2 	bl	8000e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d12:	f107 0308 	add.w	r3, r7, #8
 8000d16:	4619      	mov	r1, r3
 8000d18:	480c      	ldr	r0, [pc, #48]	; (8000d4c <MX_TIM2_Init+0x94>)
 8000d1a:	f001 ff92 	bl	8002c42 <HAL_TIM_ConfigClockSource>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d24:	f000 f8a4 	bl	8000e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d30:	463b      	mov	r3, r7
 8000d32:	4619      	mov	r1, r3
 8000d34:	4805      	ldr	r0, [pc, #20]	; (8000d4c <MX_TIM2_Init+0x94>)
 8000d36:	f002 f98b 	bl	8003050 <HAL_TIMEx_MasterConfigSynchronization>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d40:	f000 f896 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d44:	bf00      	nop
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000244 	.word	0x20000244

08000d50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_USART1_UART_Init+0x4c>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	; (8000da0 <MX_USART1_UART_Init+0x50>)
 8000d58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <MX_USART1_UART_Init+0x4c>)
 8000d5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_USART1_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_USART1_UART_Init+0x4c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <MX_USART1_UART_Init+0x4c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d74:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_USART1_UART_Init+0x4c>)
 8000d76:	220c      	movs	r2, #12
 8000d78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <MX_USART1_UART_Init+0x4c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_USART1_UART_Init+0x4c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_USART1_UART_Init+0x4c>)
 8000d88:	f002 f9e4 	bl	8003154 <HAL_UART_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d92:	f000 f86d 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000200 	.word	0x20000200
 8000da0:	40011000 	.word	0x40011000

08000da4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <MX_DMA_Init+0x3c>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <MX_DMA_Init+0x3c>)
 8000db4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <MX_DMA_Init+0x3c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2100      	movs	r1, #0
 8000dca:	203a      	movs	r0, #58	; 0x3a
 8000dcc:	f000 fbc5 	bl	800155a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000dd0:	203a      	movs	r0, #58	; 0x3a
 8000dd2:	f000 fbde 	bl	8001592 <HAL_NVIC_EnableIRQ>

}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40023800 	.word	0x40023800

08000de4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df8:	2300      	movs	r3, #0
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <MX_GPIO_Init+0x80>)
 8000dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e00:	4a18      	ldr	r2, [pc, #96]	; (8000e64 <MX_GPIO_Init+0x80>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	6313      	str	r3, [r2, #48]	; 0x30
 8000e08:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <MX_GPIO_Init+0x80>)
 8000e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	603b      	str	r3, [r7, #0]
 8000e12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000e14:	2307      	movs	r3, #7
 8000e16:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e18:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <MX_GPIO_Init+0x84>)
 8000e1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	4619      	mov	r1, r3
 8000e24:	4811      	ldr	r0, [pc, #68]	; (8000e6c <MX_GPIO_Init+0x88>)
 8000e26:	f000 ff3f 	bl	8001ca8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	2006      	movs	r0, #6
 8000e30:	f000 fb93 	bl	800155a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e34:	2006      	movs	r0, #6
 8000e36:	f000 fbac 	bl	8001592 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2007      	movs	r0, #7
 8000e40:	f000 fb8b 	bl	800155a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000e44:	2007      	movs	r0, #7
 8000e46:	f000 fba4 	bl	8001592 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2008      	movs	r0, #8
 8000e50:	f000 fb83 	bl	800155a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000e54:	2008      	movs	r0, #8
 8000e56:	f000 fb9c 	bl	8001592 <HAL_NVIC_EnableIRQ>

}
 8000e5a:	bf00      	nop
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40023800 	.word	0x40023800
 8000e68:	10110000 	.word	0x10110000
 8000e6c:	40020000 	.word	0x40020000

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e78:	e7fe      	b.n	8000e78 <Error_Handler+0x8>
	...

08000e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e90:	6453      	str	r3, [r2, #68]	; 0x44
 8000e92:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	4a08      	ldr	r2, [pc, #32]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eac:	6413      	str	r3, [r2, #64]	; 0x40
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800

08000ecc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000edc:	d115      	bne.n	8000f0a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <HAL_TIM_Base_MspInit+0x48>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	4a0b      	ldr	r2, [pc, #44]	; (8000f14 <HAL_TIM_Base_MspInit+0x48>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6413      	str	r3, [r2, #64]	; 0x40
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <HAL_TIM_Base_MspInit+0x48>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2100      	movs	r1, #0
 8000efe:	201c      	movs	r0, #28
 8000f00:	f000 fb2b 	bl	800155a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f04:	201c      	movs	r0, #28
 8000f06:	f000 fb44 	bl	8001592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40023800 	.word	0x40023800

08000f18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	; 0x28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a31      	ldr	r2, [pc, #196]	; (8000ffc <HAL_UART_MspInit+0xe4>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d15b      	bne.n	8000ff2 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	4b30      	ldr	r3, [pc, #192]	; (8001000 <HAL_UART_MspInit+0xe8>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	4a2f      	ldr	r2, [pc, #188]	; (8001000 <HAL_UART_MspInit+0xe8>)
 8000f44:	f043 0310 	orr.w	r3, r3, #16
 8000f48:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <HAL_UART_MspInit+0xe8>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	f003 0310 	and.w	r3, r3, #16
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	4b29      	ldr	r3, [pc, #164]	; (8001000 <HAL_UART_MspInit+0xe8>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a28      	ldr	r2, [pc, #160]	; (8001000 <HAL_UART_MspInit+0xe8>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b26      	ldr	r3, [pc, #152]	; (8001000 <HAL_UART_MspInit+0xe8>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f72:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f80:	2303      	movs	r3, #3
 8000f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f84:	2307      	movs	r3, #7
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	481d      	ldr	r0, [pc, #116]	; (8001004 <HAL_UART_MspInit+0xec>)
 8000f90:	f000 fe8a 	bl	8001ca8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000f94:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <HAL_UART_MspInit+0xf0>)
 8000f96:	4a1d      	ldr	r2, [pc, #116]	; (800100c <HAL_UART_MspInit+0xf4>)
 8000f98:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000f9a:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <HAL_UART_MspInit+0xf0>)
 8000f9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fa0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <HAL_UART_MspInit+0xf0>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa8:	4b17      	ldr	r3, [pc, #92]	; (8001008 <HAL_UART_MspInit+0xf0>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fae:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_UART_MspInit+0xf0>)
 8000fb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fb4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fb6:	4b14      	ldr	r3, [pc, #80]	; (8001008 <HAL_UART_MspInit+0xf0>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <HAL_UART_MspInit+0xf0>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <HAL_UART_MspInit+0xf0>)
 8000fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <HAL_UART_MspInit+0xf0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <HAL_UART_MspInit+0xf0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000fd6:	480c      	ldr	r0, [pc, #48]	; (8001008 <HAL_UART_MspInit+0xf0>)
 8000fd8:	f000 faf6 	bl	80015c8 <HAL_DMA_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000fe2:	f7ff ff45 	bl	8000e70 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a07      	ldr	r2, [pc, #28]	; (8001008 <HAL_UART_MspInit+0xf0>)
 8000fea:	639a      	str	r2, [r3, #56]	; 0x38
 8000fec:	4a06      	ldr	r2, [pc, #24]	; (8001008 <HAL_UART_MspInit+0xf0>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ff2:	bf00      	nop
 8000ff4:	3728      	adds	r7, #40	; 0x28
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40011000 	.word	0x40011000
 8001000:	40023800 	.word	0x40023800
 8001004:	40020000 	.word	0x40020000
 8001008:	200001a0 	.word	0x200001a0
 800100c:	40026440 	.word	0x40026440

08001010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <NMI_Handler+0x4>

08001016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101a:	e7fe      	b.n	800101a <HardFault_Handler+0x4>

0800101c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <MemManage_Handler+0x4>

08001022 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <BusFault_Handler+0x4>

08001028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <UsageFault_Handler+0x4>

0800102e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800105c:	f000 f95e 	bl	800131c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}

08001064 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001068:	2001      	movs	r0, #1
 800106a:	f000 ffa1 	bl	8001fb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}

08001072 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001076:	2002      	movs	r0, #2
 8001078:	f000 ff9a 	bl	8001fb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}

08001080 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001084:	2004      	movs	r0, #4
 8001086:	f000 ff93 	bl	8001fb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <TIM2_IRQHandler+0x10>)
 8001096:	f001 fccc 	bl	8002a32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000244 	.word	0x20000244

080010a4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <DMA2_Stream2_IRQHandler+0x10>)
 80010aa:	f000 fb93 	bl	80017d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200001a0 	.word	0x200001a0

080010b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	e00a      	b.n	80010e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010ca:	f3af 8000 	nop.w
 80010ce:	4601      	mov	r1, r0
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	1c5a      	adds	r2, r3, #1
 80010d4:	60ba      	str	r2, [r7, #8]
 80010d6:	b2ca      	uxtb	r2, r1
 80010d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	3301      	adds	r3, #1
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	dbf0      	blt.n	80010ca <_read+0x12>
	}

return len;
 80010e8:	687b      	ldr	r3, [r7, #4]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	60f8      	str	r0, [r7, #12]
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	e009      	b.n	8001118 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	60ba      	str	r2, [r7, #8]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fc27 	bl	8000960 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	3301      	adds	r3, #1
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	697a      	ldr	r2, [r7, #20]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	429a      	cmp	r2, r3
 800111e:	dbf1      	blt.n	8001104 <_write+0x12>
	}
	return len;
 8001120:	687b      	ldr	r3, [r7, #4]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <_close>:

int _close(int file)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
	return -1;
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001152:	605a      	str	r2, [r3, #4]
	return 0;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <_isatty>:

int _isatty(int file)
{
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
	return 1;
 800116a:	2301      	movs	r3, #1
}
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
	return 0;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800119c:	4a14      	ldr	r2, [pc, #80]	; (80011f0 <_sbrk+0x5c>)
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <_sbrk+0x60>)
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a8:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <_sbrk+0x64>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d102      	bne.n	80011b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <_sbrk+0x64>)
 80011b2:	4a12      	ldr	r2, [pc, #72]	; (80011fc <_sbrk+0x68>)
 80011b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <_sbrk+0x64>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d207      	bcs.n	80011d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c4:	f002 fc60 	bl	8003a88 <__errno>
 80011c8:	4603      	mov	r3, r0
 80011ca:	220c      	movs	r2, #12
 80011cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295
 80011d2:	e009      	b.n	80011e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <_sbrk+0x64>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011da:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <_sbrk+0x64>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <_sbrk+0x64>)
 80011e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011e6:	68fb      	ldr	r3, [r7, #12]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20020000 	.word	0x20020000
 80011f4:	00000400 	.word	0x00000400
 80011f8:	20000194 	.word	0x20000194
 80011fc:	200002a0 	.word	0x200002a0

08001200 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <SystemInit+0x20>)
 8001206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800120a:	4a05      	ldr	r2, [pc, #20]	; (8001220 <SystemInit+0x20>)
 800120c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001224:	f8df d034 	ldr.w	sp, [pc, #52]	; 800125c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001228:	480d      	ldr	r0, [pc, #52]	; (8001260 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800122a:	490e      	ldr	r1, [pc, #56]	; (8001264 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800122c:	4a0e      	ldr	r2, [pc, #56]	; (8001268 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001230:	e002      	b.n	8001238 <LoopCopyDataInit>

08001232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001236:	3304      	adds	r3, #4

08001238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800123c:	d3f9      	bcc.n	8001232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800123e:	4a0b      	ldr	r2, [pc, #44]	; (800126c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001240:	4c0b      	ldr	r4, [pc, #44]	; (8001270 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001244:	e001      	b.n	800124a <LoopFillZerobss>

08001246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001248:	3204      	adds	r2, #4

0800124a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800124c:	d3fb      	bcc.n	8001246 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800124e:	f7ff ffd7 	bl	8001200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001252:	f002 fde9 	bl	8003e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001256:	f7ff fc4f 	bl	8000af8 <main>
  bx  lr    
 800125a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800125c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001264:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001268:	08004afc 	.word	0x08004afc
  ldr r2, =_sbss
 800126c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001270:	200002a0 	.word	0x200002a0

08001274 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001274:	e7fe      	b.n	8001274 <ADC_IRQHandler>
	...

08001278 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800127c:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <HAL_Init+0x40>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a0d      	ldr	r2, [pc, #52]	; (80012b8 <HAL_Init+0x40>)
 8001282:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001286:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001288:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <HAL_Init+0x40>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <HAL_Init+0x40>)
 800128e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001292:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <HAL_Init+0x40>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a07      	ldr	r2, [pc, #28]	; (80012b8 <HAL_Init+0x40>)
 800129a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a0:	2003      	movs	r0, #3
 80012a2:	f000 f94f 	bl	8001544 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012a6:	2000      	movs	r0, #0
 80012a8:	f000 f808 	bl	80012bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012ac:	f7ff fde6 	bl	8000e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40023c00 	.word	0x40023c00

080012bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_InitTick+0x54>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_InitTick+0x58>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 f967 	bl	80015ae <HAL_SYSTICK_Config>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e00e      	b.n	8001308 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b0f      	cmp	r3, #15
 80012ee:	d80a      	bhi.n	8001306 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f0:	2200      	movs	r2, #0
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	f04f 30ff 	mov.w	r0, #4294967295
 80012f8:	f000 f92f 	bl	800155a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012fc:	4a06      	ldr	r2, [pc, #24]	; (8001318 <HAL_InitTick+0x5c>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001302:	2300      	movs	r3, #0
 8001304:	e000      	b.n	8001308 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
}
 8001308:	4618      	mov	r0, r3
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000000 	.word	0x20000000
 8001314:	20000008 	.word	0x20000008
 8001318:	20000004 	.word	0x20000004

0800131c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_IncTick+0x20>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	461a      	mov	r2, r3
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_IncTick+0x24>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4413      	add	r3, r2
 800132c:	4a04      	ldr	r2, [pc, #16]	; (8001340 <HAL_IncTick+0x24>)
 800132e:	6013      	str	r3, [r2, #0]
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20000008 	.word	0x20000008
 8001340:	2000028c 	.word	0x2000028c

08001344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return uwTick;
 8001348:	4b03      	ldr	r3, [pc, #12]	; (8001358 <HAL_GetTick+0x14>)
 800134a:	681b      	ldr	r3, [r3, #0]
}
 800134c:	4618      	mov	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	2000028c 	.word	0x2000028c

0800135c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001364:	f7ff ffee 	bl	8001344 <HAL_GetTick>
 8001368:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001374:	d005      	beq.n	8001382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <HAL_Delay+0x44>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	461a      	mov	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4413      	add	r3, r2
 8001380:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001382:	bf00      	nop
 8001384:	f7ff ffde 	bl	8001344 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	429a      	cmp	r2, r3
 8001392:	d8f7      	bhi.n	8001384 <HAL_Delay+0x28>
  {
  }
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000008 	.word	0x20000008

080013a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c0:	4013      	ands	r3, r2
 80013c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013d6:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	60d3      	str	r3, [r2, #12]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <__NVIC_GetPriorityGrouping+0x18>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	f003 0307 	and.w	r3, r3, #7
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	2b00      	cmp	r3, #0
 8001418:	db0b      	blt.n	8001432 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	f003 021f 	and.w	r2, r3, #31
 8001420:	4907      	ldr	r1, [pc, #28]	; (8001440 <__NVIC_EnableIRQ+0x38>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	095b      	lsrs	r3, r3, #5
 8001428:	2001      	movs	r0, #1
 800142a:	fa00 f202 	lsl.w	r2, r0, r2
 800142e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000e100 	.word	0xe000e100

08001444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	6039      	str	r1, [r7, #0]
 800144e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001454:	2b00      	cmp	r3, #0
 8001456:	db0a      	blt.n	800146e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	b2da      	uxtb	r2, r3
 800145c:	490c      	ldr	r1, [pc, #48]	; (8001490 <__NVIC_SetPriority+0x4c>)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	0112      	lsls	r2, r2, #4
 8001464:	b2d2      	uxtb	r2, r2
 8001466:	440b      	add	r3, r1
 8001468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800146c:	e00a      	b.n	8001484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4908      	ldr	r1, [pc, #32]	; (8001494 <__NVIC_SetPriority+0x50>)
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	3b04      	subs	r3, #4
 800147c:	0112      	lsls	r2, r2, #4
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	440b      	add	r3, r1
 8001482:	761a      	strb	r2, [r3, #24]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000e100 	.word	0xe000e100
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001498:	b480      	push	{r7}
 800149a:	b089      	sub	sp, #36	; 0x24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f1c3 0307 	rsb	r3, r3, #7
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	bf28      	it	cs
 80014b6:	2304      	movcs	r3, #4
 80014b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3304      	adds	r3, #4
 80014be:	2b06      	cmp	r3, #6
 80014c0:	d902      	bls.n	80014c8 <NVIC_EncodePriority+0x30>
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3b03      	subs	r3, #3
 80014c6:	e000      	b.n	80014ca <NVIC_EncodePriority+0x32>
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014cc:	f04f 32ff 	mov.w	r2, #4294967295
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43da      	mvns	r2, r3
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	401a      	ands	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e0:	f04f 31ff 	mov.w	r1, #4294967295
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	43d9      	mvns	r1, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	4313      	orrs	r3, r2
         );
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3724      	adds	r7, #36	; 0x24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
	...

08001500 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3b01      	subs	r3, #1
 800150c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001510:	d301      	bcc.n	8001516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001512:	2301      	movs	r3, #1
 8001514:	e00f      	b.n	8001536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001516:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <SysTick_Config+0x40>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3b01      	subs	r3, #1
 800151c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800151e:	210f      	movs	r1, #15
 8001520:	f04f 30ff 	mov.w	r0, #4294967295
 8001524:	f7ff ff8e 	bl	8001444 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <SysTick_Config+0x40>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152e:	4b04      	ldr	r3, [pc, #16]	; (8001540 <SysTick_Config+0x40>)
 8001530:	2207      	movs	r2, #7
 8001532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	e000e010 	.word	0xe000e010

08001544 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff ff29 	bl	80013a4 <__NVIC_SetPriorityGrouping>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800155a:	b580      	push	{r7, lr}
 800155c:	b086      	sub	sp, #24
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
 8001566:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800156c:	f7ff ff3e 	bl	80013ec <__NVIC_GetPriorityGrouping>
 8001570:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	68b9      	ldr	r1, [r7, #8]
 8001576:	6978      	ldr	r0, [r7, #20]
 8001578:	f7ff ff8e 	bl	8001498 <NVIC_EncodePriority>
 800157c:	4602      	mov	r2, r0
 800157e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001582:	4611      	mov	r1, r2
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff5d 	bl	8001444 <__NVIC_SetPriority>
}
 800158a:	bf00      	nop
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	4603      	mov	r3, r0
 800159a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff31 	bl	8001408 <__NVIC_EnableIRQ>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ffa2 	bl	8001500 <SysTick_Config>
 80015bc:	4603      	mov	r3, r0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80015d4:	f7ff feb6 	bl	8001344 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e099      	b.n	8001718 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2202      	movs	r2, #2
 80015f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0201 	bic.w	r2, r2, #1
 8001602:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001604:	e00f      	b.n	8001626 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001606:	f7ff fe9d 	bl	8001344 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b05      	cmp	r3, #5
 8001612:	d908      	bls.n	8001626 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2220      	movs	r2, #32
 8001618:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2203      	movs	r2, #3
 800161e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e078      	b.n	8001718 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1e8      	bne.n	8001606 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	4b38      	ldr	r3, [pc, #224]	; (8001720 <HAL_DMA_Init+0x158>)
 8001640:	4013      	ands	r3, r2
 8001642:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001652:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800165e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800166a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	4313      	orrs	r3, r2
 8001676:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167c:	2b04      	cmp	r3, #4
 800167e:	d107      	bne.n	8001690 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001688:	4313      	orrs	r3, r2
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	4313      	orrs	r3, r2
 800168e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	f023 0307 	bic.w	r3, r3, #7
 80016a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	d117      	bne.n	80016ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d00e      	beq.n	80016ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 fa6f 	bl	8001bb0 <DMA_CheckFifoParam>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d008      	beq.n	80016ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2240      	movs	r2, #64	; 0x40
 80016dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80016e6:	2301      	movs	r3, #1
 80016e8:	e016      	b.n	8001718 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 fa26 	bl	8001b44 <DMA_CalcBaseAndBitshift>
 80016f8:	4603      	mov	r3, r0
 80016fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001700:	223f      	movs	r2, #63	; 0x3f
 8001702:	409a      	lsls	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	f010803f 	.word	0xf010803f

08001724 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
 8001730:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001742:	2b01      	cmp	r3, #1
 8001744:	d101      	bne.n	800174a <HAL_DMA_Start_IT+0x26>
 8001746:	2302      	movs	r3, #2
 8001748:	e040      	b.n	80017cc <HAL_DMA_Start_IT+0xa8>
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2201      	movs	r2, #1
 800174e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b01      	cmp	r3, #1
 800175c:	d12f      	bne.n	80017be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2202      	movs	r2, #2
 8001762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2200      	movs	r2, #0
 800176a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	68b9      	ldr	r1, [r7, #8]
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f000 f9b8 	bl	8001ae8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177c:	223f      	movs	r2, #63	; 0x3f
 800177e:	409a      	lsls	r2, r3
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f042 0216 	orr.w	r2, r2, #22
 8001792:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	2b00      	cmp	r3, #0
 800179a:	d007      	beq.n	80017ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f042 0208 	orr.w	r2, r2, #8
 80017aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f042 0201 	orr.w	r2, r2, #1
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	e005      	b.n	80017ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80017c6:	2302      	movs	r3, #2
 80017c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80017ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80017e0:	4b92      	ldr	r3, [pc, #584]	; (8001a2c <HAL_DMA_IRQHandler+0x258>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a92      	ldr	r2, [pc, #584]	; (8001a30 <HAL_DMA_IRQHandler+0x25c>)
 80017e6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ea:	0a9b      	lsrs	r3, r3, #10
 80017ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017fe:	2208      	movs	r2, #8
 8001800:	409a      	lsls	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4013      	ands	r3, r2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d01a      	beq.n	8001840 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b00      	cmp	r3, #0
 8001816:	d013      	beq.n	8001840 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 0204 	bic.w	r2, r2, #4
 8001826:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182c:	2208      	movs	r2, #8
 800182e:	409a      	lsls	r2, r3
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001838:	f043 0201 	orr.w	r2, r3, #1
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001844:	2201      	movs	r2, #1
 8001846:	409a      	lsls	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4013      	ands	r3, r2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d012      	beq.n	8001876 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800185a:	2b00      	cmp	r3, #0
 800185c:	d00b      	beq.n	8001876 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001862:	2201      	movs	r2, #1
 8001864:	409a      	lsls	r2, r3
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186e:	f043 0202 	orr.w	r2, r3, #2
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800187a:	2204      	movs	r2, #4
 800187c:	409a      	lsls	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4013      	ands	r3, r2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d012      	beq.n	80018ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00b      	beq.n	80018ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001898:	2204      	movs	r2, #4
 800189a:	409a      	lsls	r2, r3
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a4:	f043 0204 	orr.w	r2, r3, #4
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b0:	2210      	movs	r2, #16
 80018b2:	409a      	lsls	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4013      	ands	r3, r2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d043      	beq.n	8001944 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d03c      	beq.n	8001944 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ce:	2210      	movs	r2, #16
 80018d0:	409a      	lsls	r2, r3
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d018      	beq.n	8001916 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d108      	bne.n	8001904 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d024      	beq.n	8001944 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	4798      	blx	r3
 8001902:	e01f      	b.n	8001944 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001908:	2b00      	cmp	r3, #0
 800190a:	d01b      	beq.n	8001944 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	4798      	blx	r3
 8001914:	e016      	b.n	8001944 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001920:	2b00      	cmp	r3, #0
 8001922:	d107      	bne.n	8001934 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0208 	bic.w	r2, r2, #8
 8001932:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001948:	2220      	movs	r2, #32
 800194a:	409a      	lsls	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4013      	ands	r3, r2
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 808e 	beq.w	8001a72 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0310 	and.w	r3, r3, #16
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 8086 	beq.w	8001a72 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800196a:	2220      	movs	r2, #32
 800196c:	409a      	lsls	r2, r3
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b05      	cmp	r3, #5
 800197c:	d136      	bne.n	80019ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0216 	bic.w	r2, r2, #22
 800198c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	695a      	ldr	r2, [r3, #20]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800199c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d103      	bne.n	80019ae <HAL_DMA_IRQHandler+0x1da>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d007      	beq.n	80019be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0208 	bic.w	r2, r2, #8
 80019bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c2:	223f      	movs	r2, #63	; 0x3f
 80019c4:	409a      	lsls	r2, r3
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d07d      	beq.n	8001ade <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	4798      	blx	r3
        }
        return;
 80019ea:	e078      	b.n	8001ade <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d01c      	beq.n	8001a34 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d108      	bne.n	8001a1a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d030      	beq.n	8001a72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	4798      	blx	r3
 8001a18:	e02b      	b.n	8001a72 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d027      	beq.n	8001a72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	4798      	blx	r3
 8001a2a:	e022      	b.n	8001a72 <HAL_DMA_IRQHandler+0x29e>
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10f      	bne.n	8001a62 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 0210 	bic.w	r2, r2, #16
 8001a50:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d032      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d022      	beq.n	8001acc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2205      	movs	r2, #5
 8001a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0201 	bic.w	r2, r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d307      	bcc.n	8001aba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1f2      	bne.n	8001a9e <HAL_DMA_IRQHandler+0x2ca>
 8001ab8:	e000      	b.n	8001abc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001aba:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	4798      	blx	r3
 8001adc:	e000      	b.n	8001ae0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001ade:	bf00      	nop
    }
  }
}
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop

08001ae8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	2b40      	cmp	r3, #64	; 0x40
 8001b14:	d108      	bne.n	8001b28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b26:	e007      	b.n	8001b38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68ba      	ldr	r2, [r7, #8]
 8001b2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	60da      	str	r2, [r3, #12]
}
 8001b38:	bf00      	nop
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	3b10      	subs	r3, #16
 8001b54:	4a14      	ldr	r2, [pc, #80]	; (8001ba8 <DMA_CalcBaseAndBitshift+0x64>)
 8001b56:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5a:	091b      	lsrs	r3, r3, #4
 8001b5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b5e:	4a13      	ldr	r2, [pc, #76]	; (8001bac <DMA_CalcBaseAndBitshift+0x68>)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2b03      	cmp	r3, #3
 8001b70:	d909      	bls.n	8001b86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b7a:	f023 0303 	bic.w	r3, r3, #3
 8001b7e:	1d1a      	adds	r2, r3, #4
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	659a      	str	r2, [r3, #88]	; 0x58
 8001b84:	e007      	b.n	8001b96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b8e:	f023 0303 	bic.w	r3, r3, #3
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	aaaaaaab 	.word	0xaaaaaaab
 8001bac:	08004a4c 	.word	0x08004a4c

08001bb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d11f      	bne.n	8001c0a <DMA_CheckFifoParam+0x5a>
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d856      	bhi.n	8001c7e <DMA_CheckFifoParam+0xce>
 8001bd0:	a201      	add	r2, pc, #4	; (adr r2, 8001bd8 <DMA_CheckFifoParam+0x28>)
 8001bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd6:	bf00      	nop
 8001bd8:	08001be9 	.word	0x08001be9
 8001bdc:	08001bfb 	.word	0x08001bfb
 8001be0:	08001be9 	.word	0x08001be9
 8001be4:	08001c7f 	.word	0x08001c7f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d046      	beq.n	8001c82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bf8:	e043      	b.n	8001c82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c02:	d140      	bne.n	8001c86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c08:	e03d      	b.n	8001c86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c12:	d121      	bne.n	8001c58 <DMA_CheckFifoParam+0xa8>
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d837      	bhi.n	8001c8a <DMA_CheckFifoParam+0xda>
 8001c1a:	a201      	add	r2, pc, #4	; (adr r2, 8001c20 <DMA_CheckFifoParam+0x70>)
 8001c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c20:	08001c31 	.word	0x08001c31
 8001c24:	08001c37 	.word	0x08001c37
 8001c28:	08001c31 	.word	0x08001c31
 8001c2c:	08001c49 	.word	0x08001c49
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	73fb      	strb	r3, [r7, #15]
      break;
 8001c34:	e030      	b.n	8001c98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d025      	beq.n	8001c8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c46:	e022      	b.n	8001c8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c50:	d11f      	bne.n	8001c92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c56:	e01c      	b.n	8001c92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d903      	bls.n	8001c66 <DMA_CheckFifoParam+0xb6>
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	d003      	beq.n	8001c6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c64:	e018      	b.n	8001c98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	73fb      	strb	r3, [r7, #15]
      break;
 8001c6a:	e015      	b.n	8001c98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00e      	beq.n	8001c96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8001c7c:	e00b      	b.n	8001c96 <DMA_CheckFifoParam+0xe6>
      break;
 8001c7e:	bf00      	nop
 8001c80:	e00a      	b.n	8001c98 <DMA_CheckFifoParam+0xe8>
      break;
 8001c82:	bf00      	nop
 8001c84:	e008      	b.n	8001c98 <DMA_CheckFifoParam+0xe8>
      break;
 8001c86:	bf00      	nop
 8001c88:	e006      	b.n	8001c98 <DMA_CheckFifoParam+0xe8>
      break;
 8001c8a:	bf00      	nop
 8001c8c:	e004      	b.n	8001c98 <DMA_CheckFifoParam+0xe8>
      break;
 8001c8e:	bf00      	nop
 8001c90:	e002      	b.n	8001c98 <DMA_CheckFifoParam+0xe8>
      break;   
 8001c92:	bf00      	nop
 8001c94:	e000      	b.n	8001c98 <DMA_CheckFifoParam+0xe8>
      break;
 8001c96:	bf00      	nop
    }
  } 
  
  return status; 
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop

08001ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b089      	sub	sp, #36	; 0x24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
 8001cc2:	e159      	b.n	8001f78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	f040 8148 	bne.w	8001f72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d005      	beq.n	8001cfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d130      	bne.n	8001d5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	2203      	movs	r2, #3
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d30:	2201      	movs	r2, #1
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	091b      	lsrs	r3, r3, #4
 8001d46:	f003 0201 	and.w	r2, r3, #1
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	d017      	beq.n	8001d98 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	2203      	movs	r2, #3
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d123      	bne.n	8001dec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	08da      	lsrs	r2, r3, #3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3208      	adds	r2, #8
 8001dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	220f      	movs	r2, #15
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	691a      	ldr	r2, [r3, #16]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	08da      	lsrs	r2, r3, #3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3208      	adds	r2, #8
 8001de6:	69b9      	ldr	r1, [r7, #24]
 8001de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	2203      	movs	r2, #3
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 0203 	and.w	r2, r3, #3
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 80a2 	beq.w	8001f72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	4b57      	ldr	r3, [pc, #348]	; (8001f90 <HAL_GPIO_Init+0x2e8>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	4a56      	ldr	r2, [pc, #344]	; (8001f90 <HAL_GPIO_Init+0x2e8>)
 8001e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3e:	4b54      	ldr	r3, [pc, #336]	; (8001f90 <HAL_GPIO_Init+0x2e8>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e4a:	4a52      	ldr	r2, [pc, #328]	; (8001f94 <HAL_GPIO_Init+0x2ec>)
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	089b      	lsrs	r3, r3, #2
 8001e50:	3302      	adds	r3, #2
 8001e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	220f      	movs	r2, #15
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a49      	ldr	r2, [pc, #292]	; (8001f98 <HAL_GPIO_Init+0x2f0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d019      	beq.n	8001eaa <HAL_GPIO_Init+0x202>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a48      	ldr	r2, [pc, #288]	; (8001f9c <HAL_GPIO_Init+0x2f4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d013      	beq.n	8001ea6 <HAL_GPIO_Init+0x1fe>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a47      	ldr	r2, [pc, #284]	; (8001fa0 <HAL_GPIO_Init+0x2f8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d00d      	beq.n	8001ea2 <HAL_GPIO_Init+0x1fa>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a46      	ldr	r2, [pc, #280]	; (8001fa4 <HAL_GPIO_Init+0x2fc>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d007      	beq.n	8001e9e <HAL_GPIO_Init+0x1f6>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a45      	ldr	r2, [pc, #276]	; (8001fa8 <HAL_GPIO_Init+0x300>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d101      	bne.n	8001e9a <HAL_GPIO_Init+0x1f2>
 8001e96:	2304      	movs	r3, #4
 8001e98:	e008      	b.n	8001eac <HAL_GPIO_Init+0x204>
 8001e9a:	2307      	movs	r3, #7
 8001e9c:	e006      	b.n	8001eac <HAL_GPIO_Init+0x204>
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e004      	b.n	8001eac <HAL_GPIO_Init+0x204>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e002      	b.n	8001eac <HAL_GPIO_Init+0x204>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <HAL_GPIO_Init+0x204>
 8001eaa:	2300      	movs	r3, #0
 8001eac:	69fa      	ldr	r2, [r7, #28]
 8001eae:	f002 0203 	and.w	r2, r2, #3
 8001eb2:	0092      	lsls	r2, r2, #2
 8001eb4:	4093      	lsls	r3, r2
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ebc:	4935      	ldr	r1, [pc, #212]	; (8001f94 <HAL_GPIO_Init+0x2ec>)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	089b      	lsrs	r3, r3, #2
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eca:	4b38      	ldr	r3, [pc, #224]	; (8001fac <HAL_GPIO_Init+0x304>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eee:	4a2f      	ldr	r2, [pc, #188]	; (8001fac <HAL_GPIO_Init+0x304>)
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ef4:	4b2d      	ldr	r3, [pc, #180]	; (8001fac <HAL_GPIO_Init+0x304>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d003      	beq.n	8001f18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f18:	4a24      	ldr	r2, [pc, #144]	; (8001fac <HAL_GPIO_Init+0x304>)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f1e:	4b23      	ldr	r3, [pc, #140]	; (8001fac <HAL_GPIO_Init+0x304>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f42:	4a1a      	ldr	r2, [pc, #104]	; (8001fac <HAL_GPIO_Init+0x304>)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f48:	4b18      	ldr	r3, [pc, #96]	; (8001fac <HAL_GPIO_Init+0x304>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f6c:	4a0f      	ldr	r2, [pc, #60]	; (8001fac <HAL_GPIO_Init+0x304>)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3301      	adds	r3, #1
 8001f76:	61fb      	str	r3, [r7, #28]
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	2b0f      	cmp	r3, #15
 8001f7c:	f67f aea2 	bls.w	8001cc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f80:	bf00      	nop
 8001f82:	bf00      	nop
 8001f84:	3724      	adds	r7, #36	; 0x24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40013800 	.word	0x40013800
 8001f98:	40020000 	.word	0x40020000
 8001f9c:	40020400 	.word	0x40020400
 8001fa0:	40020800 	.word	0x40020800
 8001fa4:	40020c00 	.word	0x40020c00
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40013c00 	.word	0x40013c00

08001fb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fba:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fbc:	695a      	ldr	r2, [r3, #20]
 8001fbe:	88fb      	ldrh	r3, [r7, #6]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d006      	beq.n	8001fd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fc6:	4a05      	ldr	r2, [pc, #20]	; (8001fdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fc8:	88fb      	ldrh	r3, [r7, #6]
 8001fca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fcc:	88fb      	ldrh	r3, [r7, #6]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fd76 	bl	8000ac0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40013c00 	.word	0x40013c00

08001fe0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e264      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d075      	beq.n	80020ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ffe:	4ba3      	ldr	r3, [pc, #652]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 030c 	and.w	r3, r3, #12
 8002006:	2b04      	cmp	r3, #4
 8002008:	d00c      	beq.n	8002024 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800200a:	4ba0      	ldr	r3, [pc, #640]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002012:	2b08      	cmp	r3, #8
 8002014:	d112      	bne.n	800203c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002016:	4b9d      	ldr	r3, [pc, #628]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800201e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002022:	d10b      	bne.n	800203c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002024:	4b99      	ldr	r3, [pc, #612]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d05b      	beq.n	80020e8 <HAL_RCC_OscConfig+0x108>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d157      	bne.n	80020e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e23f      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002044:	d106      	bne.n	8002054 <HAL_RCC_OscConfig+0x74>
 8002046:	4b91      	ldr	r3, [pc, #580]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a90      	ldr	r2, [pc, #576]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 800204c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	e01d      	b.n	8002090 <HAL_RCC_OscConfig+0xb0>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800205c:	d10c      	bne.n	8002078 <HAL_RCC_OscConfig+0x98>
 800205e:	4b8b      	ldr	r3, [pc, #556]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a8a      	ldr	r2, [pc, #552]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	4b88      	ldr	r3, [pc, #544]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a87      	ldr	r2, [pc, #540]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	e00b      	b.n	8002090 <HAL_RCC_OscConfig+0xb0>
 8002078:	4b84      	ldr	r3, [pc, #528]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a83      	ldr	r2, [pc, #524]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 800207e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	4b81      	ldr	r3, [pc, #516]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a80      	ldr	r2, [pc, #512]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 800208a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800208e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d013      	beq.n	80020c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7ff f954 	bl	8001344 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a0:	f7ff f950 	bl	8001344 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b64      	cmp	r3, #100	; 0x64
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e204      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b2:	4b76      	ldr	r3, [pc, #472]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0f0      	beq.n	80020a0 <HAL_RCC_OscConfig+0xc0>
 80020be:	e014      	b.n	80020ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c0:	f7ff f940 	bl	8001344 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020c8:	f7ff f93c 	bl	8001344 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b64      	cmp	r3, #100	; 0x64
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e1f0      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020da:	4b6c      	ldr	r3, [pc, #432]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0xe8>
 80020e6:	e000      	b.n	80020ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d063      	beq.n	80021be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020f6:	4b65      	ldr	r3, [pc, #404]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00b      	beq.n	800211a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002102:	4b62      	ldr	r3, [pc, #392]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800210a:	2b08      	cmp	r3, #8
 800210c:	d11c      	bne.n	8002148 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800210e:	4b5f      	ldr	r3, [pc, #380]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d116      	bne.n	8002148 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211a:	4b5c      	ldr	r3, [pc, #368]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d005      	beq.n	8002132 <HAL_RCC_OscConfig+0x152>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d001      	beq.n	8002132 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e1c4      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002132:	4b56      	ldr	r3, [pc, #344]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	4952      	ldr	r1, [pc, #328]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002142:	4313      	orrs	r3, r2
 8002144:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002146:	e03a      	b.n	80021be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d020      	beq.n	8002192 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002150:	4b4f      	ldr	r3, [pc, #316]	; (8002290 <HAL_RCC_OscConfig+0x2b0>)
 8002152:	2201      	movs	r2, #1
 8002154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002156:	f7ff f8f5 	bl	8001344 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800215e:	f7ff f8f1 	bl	8001344 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e1a5      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002170:	4b46      	ldr	r3, [pc, #280]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0f0      	beq.n	800215e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217c:	4b43      	ldr	r3, [pc, #268]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	4940      	ldr	r1, [pc, #256]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 800218c:	4313      	orrs	r3, r2
 800218e:	600b      	str	r3, [r1, #0]
 8002190:	e015      	b.n	80021be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002192:	4b3f      	ldr	r3, [pc, #252]	; (8002290 <HAL_RCC_OscConfig+0x2b0>)
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002198:	f7ff f8d4 	bl	8001344 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021a0:	f7ff f8d0 	bl	8001344 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e184      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021b2:	4b36      	ldr	r3, [pc, #216]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d030      	beq.n	800222c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d016      	beq.n	8002200 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021d2:	4b30      	ldr	r3, [pc, #192]	; (8002294 <HAL_RCC_OscConfig+0x2b4>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d8:	f7ff f8b4 	bl	8001344 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021e0:	f7ff f8b0 	bl	8001344 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e164      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f2:	4b26      	ldr	r3, [pc, #152]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 80021f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0x200>
 80021fe:	e015      	b.n	800222c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002200:	4b24      	ldr	r3, [pc, #144]	; (8002294 <HAL_RCC_OscConfig+0x2b4>)
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002206:	f7ff f89d 	bl	8001344 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800220e:	f7ff f899 	bl	8001344 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e14d      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002220:	4b1a      	ldr	r3, [pc, #104]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1f0      	bne.n	800220e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80a0 	beq.w	800237a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800223a:	2300      	movs	r3, #0
 800223c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800223e:	4b13      	ldr	r3, [pc, #76]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10f      	bne.n	800226a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	4b0f      	ldr	r3, [pc, #60]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	4a0e      	ldr	r2, [pc, #56]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 8002254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002258:	6413      	str	r3, [r2, #64]	; 0x40
 800225a:	4b0c      	ldr	r3, [pc, #48]	; (800228c <HAL_RCC_OscConfig+0x2ac>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002266:	2301      	movs	r3, #1
 8002268:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226a:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <HAL_RCC_OscConfig+0x2b8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002272:	2b00      	cmp	r3, #0
 8002274:	d121      	bne.n	80022ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002276:	4b08      	ldr	r3, [pc, #32]	; (8002298 <HAL_RCC_OscConfig+0x2b8>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a07      	ldr	r2, [pc, #28]	; (8002298 <HAL_RCC_OscConfig+0x2b8>)
 800227c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002282:	f7ff f85f 	bl	8001344 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002288:	e011      	b.n	80022ae <HAL_RCC_OscConfig+0x2ce>
 800228a:	bf00      	nop
 800228c:	40023800 	.word	0x40023800
 8002290:	42470000 	.word	0x42470000
 8002294:	42470e80 	.word	0x42470e80
 8002298:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800229c:	f7ff f852 	bl	8001344 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e106      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ae:	4b85      	ldr	r3, [pc, #532]	; (80024c4 <HAL_RCC_OscConfig+0x4e4>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d106      	bne.n	80022d0 <HAL_RCC_OscConfig+0x2f0>
 80022c2:	4b81      	ldr	r3, [pc, #516]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 80022c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c6:	4a80      	ldr	r2, [pc, #512]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	6713      	str	r3, [r2, #112]	; 0x70
 80022ce:	e01c      	b.n	800230a <HAL_RCC_OscConfig+0x32a>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2b05      	cmp	r3, #5
 80022d6:	d10c      	bne.n	80022f2 <HAL_RCC_OscConfig+0x312>
 80022d8:	4b7b      	ldr	r3, [pc, #492]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 80022da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022dc:	4a7a      	ldr	r2, [pc, #488]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 80022de:	f043 0304 	orr.w	r3, r3, #4
 80022e2:	6713      	str	r3, [r2, #112]	; 0x70
 80022e4:	4b78      	ldr	r3, [pc, #480]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 80022e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e8:	4a77      	ldr	r2, [pc, #476]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	6713      	str	r3, [r2, #112]	; 0x70
 80022f0:	e00b      	b.n	800230a <HAL_RCC_OscConfig+0x32a>
 80022f2:	4b75      	ldr	r3, [pc, #468]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 80022f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f6:	4a74      	ldr	r2, [pc, #464]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 80022f8:	f023 0301 	bic.w	r3, r3, #1
 80022fc:	6713      	str	r3, [r2, #112]	; 0x70
 80022fe:	4b72      	ldr	r3, [pc, #456]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 8002300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002302:	4a71      	ldr	r2, [pc, #452]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 8002304:	f023 0304 	bic.w	r3, r3, #4
 8002308:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d015      	beq.n	800233e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002312:	f7ff f817 	bl	8001344 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002318:	e00a      	b.n	8002330 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800231a:	f7ff f813 	bl	8001344 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	f241 3288 	movw	r2, #5000	; 0x1388
 8002328:	4293      	cmp	r3, r2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e0c5      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002330:	4b65      	ldr	r3, [pc, #404]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 8002332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0ee      	beq.n	800231a <HAL_RCC_OscConfig+0x33a>
 800233c:	e014      	b.n	8002368 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233e:	f7ff f801 	bl	8001344 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002344:	e00a      	b.n	800235c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002346:	f7fe fffd 	bl	8001344 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	f241 3288 	movw	r2, #5000	; 0x1388
 8002354:	4293      	cmp	r3, r2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e0af      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800235c:	4b5a      	ldr	r3, [pc, #360]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 800235e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1ee      	bne.n	8002346 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002368:	7dfb      	ldrb	r3, [r7, #23]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d105      	bne.n	800237a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800236e:	4b56      	ldr	r3, [pc, #344]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	4a55      	ldr	r2, [pc, #340]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 8002374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002378:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 809b 	beq.w	80024ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002384:	4b50      	ldr	r3, [pc, #320]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 030c 	and.w	r3, r3, #12
 800238c:	2b08      	cmp	r3, #8
 800238e:	d05c      	beq.n	800244a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	2b02      	cmp	r3, #2
 8002396:	d141      	bne.n	800241c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002398:	4b4c      	ldr	r3, [pc, #304]	; (80024cc <HAL_RCC_OscConfig+0x4ec>)
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239e:	f7fe ffd1 	bl	8001344 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a6:	f7fe ffcd 	bl	8001344 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e081      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b8:	4b43      	ldr	r3, [pc, #268]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f0      	bne.n	80023a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69da      	ldr	r2, [r3, #28]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	431a      	orrs	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	019b      	lsls	r3, r3, #6
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023da:	085b      	lsrs	r3, r3, #1
 80023dc:	3b01      	subs	r3, #1
 80023de:	041b      	lsls	r3, r3, #16
 80023e0:	431a      	orrs	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e6:	061b      	lsls	r3, r3, #24
 80023e8:	4937      	ldr	r1, [pc, #220]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ee:	4b37      	ldr	r3, [pc, #220]	; (80024cc <HAL_RCC_OscConfig+0x4ec>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7fe ffa6 	bl	8001344 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023fc:	f7fe ffa2 	bl	8001344 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e056      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240e:	4b2e      	ldr	r3, [pc, #184]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0f0      	beq.n	80023fc <HAL_RCC_OscConfig+0x41c>
 800241a:	e04e      	b.n	80024ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241c:	4b2b      	ldr	r3, [pc, #172]	; (80024cc <HAL_RCC_OscConfig+0x4ec>)
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002422:	f7fe ff8f 	bl	8001344 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800242a:	f7fe ff8b 	bl	8001344 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e03f      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800243c:	4b22      	ldr	r3, [pc, #136]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1f0      	bne.n	800242a <HAL_RCC_OscConfig+0x44a>
 8002448:	e037      	b.n	80024ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d101      	bne.n	8002456 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e032      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002456:	4b1c      	ldr	r3, [pc, #112]	; (80024c8 <HAL_RCC_OscConfig+0x4e8>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d028      	beq.n	80024b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800246e:	429a      	cmp	r2, r3
 8002470:	d121      	bne.n	80024b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800247c:	429a      	cmp	r2, r3
 800247e:	d11a      	bne.n	80024b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002486:	4013      	ands	r3, r2
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800248c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800248e:	4293      	cmp	r3, r2
 8002490:	d111      	bne.n	80024b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249c:	085b      	lsrs	r3, r3, #1
 800249e:	3b01      	subs	r3, #1
 80024a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d107      	bne.n	80024b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d001      	beq.n	80024ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40007000 	.word	0x40007000
 80024c8:	40023800 	.word	0x40023800
 80024cc:	42470060 	.word	0x42470060

080024d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e0cc      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024e4:	4b68      	ldr	r3, [pc, #416]	; (8002688 <HAL_RCC_ClockConfig+0x1b8>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d90c      	bls.n	800250c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f2:	4b65      	ldr	r3, [pc, #404]	; (8002688 <HAL_RCC_ClockConfig+0x1b8>)
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fa:	4b63      	ldr	r3, [pc, #396]	; (8002688 <HAL_RCC_ClockConfig+0x1b8>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d001      	beq.n	800250c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0b8      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d020      	beq.n	800255a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002524:	4b59      	ldr	r3, [pc, #356]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	4a58      	ldr	r2, [pc, #352]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800252e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d005      	beq.n	8002548 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800253c:	4b53      	ldr	r3, [pc, #332]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	4a52      	ldr	r2, [pc, #328]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002546:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002548:	4b50      	ldr	r3, [pc, #320]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	494d      	ldr	r1, [pc, #308]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	4313      	orrs	r3, r2
 8002558:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d044      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d107      	bne.n	800257e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256e:	4b47      	ldr	r3, [pc, #284]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d119      	bne.n	80025ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e07f      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d003      	beq.n	800258e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800258a:	2b03      	cmp	r3, #3
 800258c:	d107      	bne.n	800259e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258e:	4b3f      	ldr	r3, [pc, #252]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d109      	bne.n	80025ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e06f      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259e:	4b3b      	ldr	r3, [pc, #236]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e067      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ae:	4b37      	ldr	r3, [pc, #220]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f023 0203 	bic.w	r2, r3, #3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	4934      	ldr	r1, [pc, #208]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025c0:	f7fe fec0 	bl	8001344 <HAL_GetTick>
 80025c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c6:	e00a      	b.n	80025de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c8:	f7fe febc 	bl	8001344 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e04f      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025de:	4b2b      	ldr	r3, [pc, #172]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 020c 	and.w	r2, r3, #12
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d1eb      	bne.n	80025c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025f0:	4b25      	ldr	r3, [pc, #148]	; (8002688 <HAL_RCC_ClockConfig+0x1b8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d20c      	bcs.n	8002618 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fe:	4b22      	ldr	r3, [pc, #136]	; (8002688 <HAL_RCC_ClockConfig+0x1b8>)
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002606:	4b20      	ldr	r3, [pc, #128]	; (8002688 <HAL_RCC_ClockConfig+0x1b8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d001      	beq.n	8002618 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e032      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b00      	cmp	r3, #0
 8002622:	d008      	beq.n	8002636 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002624:	4b19      	ldr	r3, [pc, #100]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4916      	ldr	r1, [pc, #88]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002632:	4313      	orrs	r3, r2
 8002634:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d009      	beq.n	8002656 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002642:	4b12      	ldr	r3, [pc, #72]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	490e      	ldr	r1, [pc, #56]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	4313      	orrs	r3, r2
 8002654:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002656:	f000 f821 	bl	800269c <HAL_RCC_GetSysClockFreq>
 800265a:	4602      	mov	r2, r0
 800265c:	4b0b      	ldr	r3, [pc, #44]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	091b      	lsrs	r3, r3, #4
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	490a      	ldr	r1, [pc, #40]	; (8002690 <HAL_RCC_ClockConfig+0x1c0>)
 8002668:	5ccb      	ldrb	r3, [r1, r3]
 800266a:	fa22 f303 	lsr.w	r3, r2, r3
 800266e:	4a09      	ldr	r2, [pc, #36]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 8002670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002672:	4b09      	ldr	r3, [pc, #36]	; (8002698 <HAL_RCC_ClockConfig+0x1c8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe fe20 	bl	80012bc <HAL_InitTick>

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40023c00 	.word	0x40023c00
 800268c:	40023800 	.word	0x40023800
 8002690:	08004a34 	.word	0x08004a34
 8002694:	20000000 	.word	0x20000000
 8002698:	20000004 	.word	0x20000004

0800269c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800269c:	b5b0      	push	{r4, r5, r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026a2:	2100      	movs	r1, #0
 80026a4:	6079      	str	r1, [r7, #4]
 80026a6:	2100      	movs	r1, #0
 80026a8:	60f9      	str	r1, [r7, #12]
 80026aa:	2100      	movs	r1, #0
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80026ae:	2100      	movs	r1, #0
 80026b0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026b2:	4952      	ldr	r1, [pc, #328]	; (80027fc <HAL_RCC_GetSysClockFreq+0x160>)
 80026b4:	6889      	ldr	r1, [r1, #8]
 80026b6:	f001 010c 	and.w	r1, r1, #12
 80026ba:	2908      	cmp	r1, #8
 80026bc:	d00d      	beq.n	80026da <HAL_RCC_GetSysClockFreq+0x3e>
 80026be:	2908      	cmp	r1, #8
 80026c0:	f200 8094 	bhi.w	80027ec <HAL_RCC_GetSysClockFreq+0x150>
 80026c4:	2900      	cmp	r1, #0
 80026c6:	d002      	beq.n	80026ce <HAL_RCC_GetSysClockFreq+0x32>
 80026c8:	2904      	cmp	r1, #4
 80026ca:	d003      	beq.n	80026d4 <HAL_RCC_GetSysClockFreq+0x38>
 80026cc:	e08e      	b.n	80027ec <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026ce:	4b4c      	ldr	r3, [pc, #304]	; (8002800 <HAL_RCC_GetSysClockFreq+0x164>)
 80026d0:	60bb      	str	r3, [r7, #8]
       break;
 80026d2:	e08e      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026d4:	4b4b      	ldr	r3, [pc, #300]	; (8002804 <HAL_RCC_GetSysClockFreq+0x168>)
 80026d6:	60bb      	str	r3, [r7, #8]
      break;
 80026d8:	e08b      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026da:	4948      	ldr	r1, [pc, #288]	; (80027fc <HAL_RCC_GetSysClockFreq+0x160>)
 80026dc:	6849      	ldr	r1, [r1, #4]
 80026de:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80026e2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026e4:	4945      	ldr	r1, [pc, #276]	; (80027fc <HAL_RCC_GetSysClockFreq+0x160>)
 80026e6:	6849      	ldr	r1, [r1, #4]
 80026e8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80026ec:	2900      	cmp	r1, #0
 80026ee:	d024      	beq.n	800273a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026f0:	4942      	ldr	r1, [pc, #264]	; (80027fc <HAL_RCC_GetSysClockFreq+0x160>)
 80026f2:	6849      	ldr	r1, [r1, #4]
 80026f4:	0989      	lsrs	r1, r1, #6
 80026f6:	4608      	mov	r0, r1
 80026f8:	f04f 0100 	mov.w	r1, #0
 80026fc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002700:	f04f 0500 	mov.w	r5, #0
 8002704:	ea00 0204 	and.w	r2, r0, r4
 8002708:	ea01 0305 	and.w	r3, r1, r5
 800270c:	493d      	ldr	r1, [pc, #244]	; (8002804 <HAL_RCC_GetSysClockFreq+0x168>)
 800270e:	fb01 f003 	mul.w	r0, r1, r3
 8002712:	2100      	movs	r1, #0
 8002714:	fb01 f102 	mul.w	r1, r1, r2
 8002718:	1844      	adds	r4, r0, r1
 800271a:	493a      	ldr	r1, [pc, #232]	; (8002804 <HAL_RCC_GetSysClockFreq+0x168>)
 800271c:	fba2 0101 	umull	r0, r1, r2, r1
 8002720:	1863      	adds	r3, r4, r1
 8002722:	4619      	mov	r1, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	461a      	mov	r2, r3
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	f7fd ff9c 	bl	8000668 <__aeabi_uldivmod>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4613      	mov	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	e04a      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800273a:	4b30      	ldr	r3, [pc, #192]	; (80027fc <HAL_RCC_GetSysClockFreq+0x160>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	099b      	lsrs	r3, r3, #6
 8002740:	461a      	mov	r2, r3
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	f240 10ff 	movw	r0, #511	; 0x1ff
 800274a:	f04f 0100 	mov.w	r1, #0
 800274e:	ea02 0400 	and.w	r4, r2, r0
 8002752:	ea03 0501 	and.w	r5, r3, r1
 8002756:	4620      	mov	r0, r4
 8002758:	4629      	mov	r1, r5
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	f04f 0300 	mov.w	r3, #0
 8002762:	014b      	lsls	r3, r1, #5
 8002764:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002768:	0142      	lsls	r2, r0, #5
 800276a:	4610      	mov	r0, r2
 800276c:	4619      	mov	r1, r3
 800276e:	1b00      	subs	r0, r0, r4
 8002770:	eb61 0105 	sbc.w	r1, r1, r5
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	f04f 0300 	mov.w	r3, #0
 800277c:	018b      	lsls	r3, r1, #6
 800277e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002782:	0182      	lsls	r2, r0, #6
 8002784:	1a12      	subs	r2, r2, r0
 8002786:	eb63 0301 	sbc.w	r3, r3, r1
 800278a:	f04f 0000 	mov.w	r0, #0
 800278e:	f04f 0100 	mov.w	r1, #0
 8002792:	00d9      	lsls	r1, r3, #3
 8002794:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002798:	00d0      	lsls	r0, r2, #3
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	1912      	adds	r2, r2, r4
 80027a0:	eb45 0303 	adc.w	r3, r5, r3
 80027a4:	f04f 0000 	mov.w	r0, #0
 80027a8:	f04f 0100 	mov.w	r1, #0
 80027ac:	0299      	lsls	r1, r3, #10
 80027ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80027b2:	0290      	lsls	r0, r2, #10
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4610      	mov	r0, r2
 80027ba:	4619      	mov	r1, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	461a      	mov	r2, r3
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	f7fd ff50 	bl	8000668 <__aeabi_uldivmod>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4613      	mov	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027d0:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <HAL_RCC_GetSysClockFreq+0x160>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	0c1b      	lsrs	r3, r3, #16
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	3301      	adds	r3, #1
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e8:	60bb      	str	r3, [r7, #8]
      break;
 80027ea:	e002      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027ec:	4b04      	ldr	r3, [pc, #16]	; (8002800 <HAL_RCC_GetSysClockFreq+0x164>)
 80027ee:	60bb      	str	r3, [r7, #8]
      break;
 80027f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027f2:	68bb      	ldr	r3, [r7, #8]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bdb0      	pop	{r4, r5, r7, pc}
 80027fc:	40023800 	.word	0x40023800
 8002800:	00f42400 	.word	0x00f42400
 8002804:	017d7840 	.word	0x017d7840

08002808 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800280c:	4b03      	ldr	r3, [pc, #12]	; (800281c <HAL_RCC_GetHCLKFreq+0x14>)
 800280e:	681b      	ldr	r3, [r3, #0]
}
 8002810:	4618      	mov	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	20000000 	.word	0x20000000

08002820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002824:	f7ff fff0 	bl	8002808 <HAL_RCC_GetHCLKFreq>
 8002828:	4602      	mov	r2, r0
 800282a:	4b05      	ldr	r3, [pc, #20]	; (8002840 <HAL_RCC_GetPCLK1Freq+0x20>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	0a9b      	lsrs	r3, r3, #10
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	4903      	ldr	r1, [pc, #12]	; (8002844 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002836:	5ccb      	ldrb	r3, [r1, r3]
 8002838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800283c:	4618      	mov	r0, r3
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40023800 	.word	0x40023800
 8002844:	08004a44 	.word	0x08004a44

08002848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800284c:	f7ff ffdc 	bl	8002808 <HAL_RCC_GetHCLKFreq>
 8002850:	4602      	mov	r2, r0
 8002852:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	0b5b      	lsrs	r3, r3, #13
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	4903      	ldr	r1, [pc, #12]	; (800286c <HAL_RCC_GetPCLK2Freq+0x24>)
 800285e:	5ccb      	ldrb	r3, [r1, r3]
 8002860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002864:	4618      	mov	r0, r3
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40023800 	.word	0x40023800
 800286c:	08004a44 	.word	0x08004a44

08002870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e041      	b.n	8002906 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d106      	bne.n	800289c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7fe fb18 	bl	8000ecc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3304      	adds	r3, #4
 80028ac:	4619      	mov	r1, r3
 80028ae:	4610      	mov	r0, r2
 80028b0:	f000 fab4 	bl	8002e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b01      	cmp	r3, #1
 8002922:	d001      	beq.n	8002928 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e044      	b.n	80029b2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a1e      	ldr	r2, [pc, #120]	; (80029c0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d018      	beq.n	800297c <HAL_TIM_Base_Start_IT+0x6c>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002952:	d013      	beq.n	800297c <HAL_TIM_Base_Start_IT+0x6c>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a1a      	ldr	r2, [pc, #104]	; (80029c4 <HAL_TIM_Base_Start_IT+0xb4>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d00e      	beq.n	800297c <HAL_TIM_Base_Start_IT+0x6c>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a19      	ldr	r2, [pc, #100]	; (80029c8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d009      	beq.n	800297c <HAL_TIM_Base_Start_IT+0x6c>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a17      	ldr	r2, [pc, #92]	; (80029cc <HAL_TIM_Base_Start_IT+0xbc>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d004      	beq.n	800297c <HAL_TIM_Base_Start_IT+0x6c>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a16      	ldr	r2, [pc, #88]	; (80029d0 <HAL_TIM_Base_Start_IT+0xc0>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d111      	bne.n	80029a0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2b06      	cmp	r3, #6
 800298c:	d010      	beq.n	80029b0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f042 0201 	orr.w	r2, r2, #1
 800299c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800299e:	e007      	b.n	80029b0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40010000 	.word	0x40010000
 80029c4:	40000400 	.word	0x40000400
 80029c8:	40000800 	.word	0x40000800
 80029cc:	40000c00 	.word	0x40000c00
 80029d0:	40014000 	.word	0x40014000

080029d4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68da      	ldr	r2, [r3, #12]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0201 	bic.w	r2, r2, #1
 80029ea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6a1a      	ldr	r2, [r3, #32]
 80029f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10f      	bne.n	8002a1c <HAL_TIM_Base_Stop_IT+0x48>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6a1a      	ldr	r2, [r3, #32]
 8002a02:	f240 4344 	movw	r3, #1092	; 0x444
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d107      	bne.n	8002a1c <HAL_TIM_Base_Stop_IT+0x48>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0201 	bic.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d122      	bne.n	8002a8e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d11b      	bne.n	8002a8e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f06f 0202 	mvn.w	r2, #2
 8002a5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	f003 0303 	and.w	r3, r3, #3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f9b2 	bl	8002dde <HAL_TIM_IC_CaptureCallback>
 8002a7a:	e005      	b.n	8002a88 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f9a4 	bl	8002dca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f9b5 	bl	8002df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d122      	bne.n	8002ae2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f003 0304 	and.w	r3, r3, #4
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d11b      	bne.n	8002ae2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f06f 0204 	mvn.w	r2, #4
 8002ab2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f988 	bl	8002dde <HAL_TIM_IC_CaptureCallback>
 8002ace:	e005      	b.n	8002adc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f97a 	bl	8002dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f98b 	bl	8002df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d122      	bne.n	8002b36 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	d11b      	bne.n	8002b36 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f06f 0208 	mvn.w	r2, #8
 8002b06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2204      	movs	r2, #4
 8002b0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f95e 	bl	8002dde <HAL_TIM_IC_CaptureCallback>
 8002b22:	e005      	b.n	8002b30 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f950 	bl	8002dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f961 	bl	8002df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	f003 0310 	and.w	r3, r3, #16
 8002b40:	2b10      	cmp	r3, #16
 8002b42:	d122      	bne.n	8002b8a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f003 0310 	and.w	r3, r3, #16
 8002b4e:	2b10      	cmp	r3, #16
 8002b50:	d11b      	bne.n	8002b8a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f06f 0210 	mvn.w	r2, #16
 8002b5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2208      	movs	r2, #8
 8002b60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f934 	bl	8002dde <HAL_TIM_IC_CaptureCallback>
 8002b76:	e005      	b.n	8002b84 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f926 	bl	8002dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f937 	bl	8002df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d10e      	bne.n	8002bb6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d107      	bne.n	8002bb6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f06f 0201 	mvn.w	r2, #1
 8002bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7fd ff73 	bl	8000a9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc0:	2b80      	cmp	r3, #128	; 0x80
 8002bc2:	d10e      	bne.n	8002be2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bce:	2b80      	cmp	r3, #128	; 0x80
 8002bd0:	d107      	bne.n	8002be2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 faaf 	bl	8003140 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bec:	2b40      	cmp	r3, #64	; 0x40
 8002bee:	d10e      	bne.n	8002c0e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfa:	2b40      	cmp	r3, #64	; 0x40
 8002bfc:	d107      	bne.n	8002c0e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f8fc 	bl	8002e06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	f003 0320 	and.w	r3, r3, #32
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	d10e      	bne.n	8002c3a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f003 0320 	and.w	r3, r3, #32
 8002c26:	2b20      	cmp	r3, #32
 8002c28:	d107      	bne.n	8002c3a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f06f 0220 	mvn.w	r2, #32
 8002c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 fa79 	bl	800312c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b084      	sub	sp, #16
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
 8002c4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <HAL_TIM_ConfigClockSource+0x18>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e0b3      	b.n	8002dc2 <HAL_TIM_ConfigClockSource+0x180>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2202      	movs	r2, #2
 8002c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c78:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c80:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c92:	d03e      	beq.n	8002d12 <HAL_TIM_ConfigClockSource+0xd0>
 8002c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c98:	f200 8087 	bhi.w	8002daa <HAL_TIM_ConfigClockSource+0x168>
 8002c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca0:	f000 8085 	beq.w	8002dae <HAL_TIM_ConfigClockSource+0x16c>
 8002ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca8:	d87f      	bhi.n	8002daa <HAL_TIM_ConfigClockSource+0x168>
 8002caa:	2b70      	cmp	r3, #112	; 0x70
 8002cac:	d01a      	beq.n	8002ce4 <HAL_TIM_ConfigClockSource+0xa2>
 8002cae:	2b70      	cmp	r3, #112	; 0x70
 8002cb0:	d87b      	bhi.n	8002daa <HAL_TIM_ConfigClockSource+0x168>
 8002cb2:	2b60      	cmp	r3, #96	; 0x60
 8002cb4:	d050      	beq.n	8002d58 <HAL_TIM_ConfigClockSource+0x116>
 8002cb6:	2b60      	cmp	r3, #96	; 0x60
 8002cb8:	d877      	bhi.n	8002daa <HAL_TIM_ConfigClockSource+0x168>
 8002cba:	2b50      	cmp	r3, #80	; 0x50
 8002cbc:	d03c      	beq.n	8002d38 <HAL_TIM_ConfigClockSource+0xf6>
 8002cbe:	2b50      	cmp	r3, #80	; 0x50
 8002cc0:	d873      	bhi.n	8002daa <HAL_TIM_ConfigClockSource+0x168>
 8002cc2:	2b40      	cmp	r3, #64	; 0x40
 8002cc4:	d058      	beq.n	8002d78 <HAL_TIM_ConfigClockSource+0x136>
 8002cc6:	2b40      	cmp	r3, #64	; 0x40
 8002cc8:	d86f      	bhi.n	8002daa <HAL_TIM_ConfigClockSource+0x168>
 8002cca:	2b30      	cmp	r3, #48	; 0x30
 8002ccc:	d064      	beq.n	8002d98 <HAL_TIM_ConfigClockSource+0x156>
 8002cce:	2b30      	cmp	r3, #48	; 0x30
 8002cd0:	d86b      	bhi.n	8002daa <HAL_TIM_ConfigClockSource+0x168>
 8002cd2:	2b20      	cmp	r3, #32
 8002cd4:	d060      	beq.n	8002d98 <HAL_TIM_ConfigClockSource+0x156>
 8002cd6:	2b20      	cmp	r3, #32
 8002cd8:	d867      	bhi.n	8002daa <HAL_TIM_ConfigClockSource+0x168>
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d05c      	beq.n	8002d98 <HAL_TIM_ConfigClockSource+0x156>
 8002cde:	2b10      	cmp	r3, #16
 8002ce0:	d05a      	beq.n	8002d98 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002ce2:	e062      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	6899      	ldr	r1, [r3, #8]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f000 f98c 	bl	8003010 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d06:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	609a      	str	r2, [r3, #8]
      break;
 8002d10:	e04e      	b.n	8002db0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	6899      	ldr	r1, [r3, #8]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f000 f975 	bl	8003010 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d34:	609a      	str	r2, [r3, #8]
      break;
 8002d36:	e03b      	b.n	8002db0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	6859      	ldr	r1, [r3, #4]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	461a      	mov	r2, r3
 8002d46:	f000 f8e9 	bl	8002f1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2150      	movs	r1, #80	; 0x50
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 f942 	bl	8002fda <TIM_ITRx_SetConfig>
      break;
 8002d56:	e02b      	b.n	8002db0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6818      	ldr	r0, [r3, #0]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	6859      	ldr	r1, [r3, #4]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	461a      	mov	r2, r3
 8002d66:	f000 f908 	bl	8002f7a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2160      	movs	r1, #96	; 0x60
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 f932 	bl	8002fda <TIM_ITRx_SetConfig>
      break;
 8002d76:	e01b      	b.n	8002db0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6818      	ldr	r0, [r3, #0]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	6859      	ldr	r1, [r3, #4]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	461a      	mov	r2, r3
 8002d86:	f000 f8c9 	bl	8002f1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2140      	movs	r1, #64	; 0x40
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 f922 	bl	8002fda <TIM_ITRx_SetConfig>
      break;
 8002d96:	e00b      	b.n	8002db0 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4619      	mov	r1, r3
 8002da2:	4610      	mov	r0, r2
 8002da4:	f000 f919 	bl	8002fda <TIM_ITRx_SetConfig>
        break;
 8002da8:	e002      	b.n	8002db0 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002daa:	bf00      	nop
 8002dac:	e000      	b.n	8002db0 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002dae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
	...

08002e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a34      	ldr	r2, [pc, #208]	; (8002f00 <TIM_Base_SetConfig+0xe4>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d00f      	beq.n	8002e54 <TIM_Base_SetConfig+0x38>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e3a:	d00b      	beq.n	8002e54 <TIM_Base_SetConfig+0x38>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a31      	ldr	r2, [pc, #196]	; (8002f04 <TIM_Base_SetConfig+0xe8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d007      	beq.n	8002e54 <TIM_Base_SetConfig+0x38>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a30      	ldr	r2, [pc, #192]	; (8002f08 <TIM_Base_SetConfig+0xec>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d003      	beq.n	8002e54 <TIM_Base_SetConfig+0x38>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a2f      	ldr	r2, [pc, #188]	; (8002f0c <TIM_Base_SetConfig+0xf0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d108      	bne.n	8002e66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a25      	ldr	r2, [pc, #148]	; (8002f00 <TIM_Base_SetConfig+0xe4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d01b      	beq.n	8002ea6 <TIM_Base_SetConfig+0x8a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e74:	d017      	beq.n	8002ea6 <TIM_Base_SetConfig+0x8a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a22      	ldr	r2, [pc, #136]	; (8002f04 <TIM_Base_SetConfig+0xe8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d013      	beq.n	8002ea6 <TIM_Base_SetConfig+0x8a>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a21      	ldr	r2, [pc, #132]	; (8002f08 <TIM_Base_SetConfig+0xec>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d00f      	beq.n	8002ea6 <TIM_Base_SetConfig+0x8a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a20      	ldr	r2, [pc, #128]	; (8002f0c <TIM_Base_SetConfig+0xf0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d00b      	beq.n	8002ea6 <TIM_Base_SetConfig+0x8a>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a1f      	ldr	r2, [pc, #124]	; (8002f10 <TIM_Base_SetConfig+0xf4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d007      	beq.n	8002ea6 <TIM_Base_SetConfig+0x8a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a1e      	ldr	r2, [pc, #120]	; (8002f14 <TIM_Base_SetConfig+0xf8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d003      	beq.n	8002ea6 <TIM_Base_SetConfig+0x8a>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a1d      	ldr	r2, [pc, #116]	; (8002f18 <TIM_Base_SetConfig+0xfc>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d108      	bne.n	8002eb8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a08      	ldr	r2, [pc, #32]	; (8002f00 <TIM_Base_SetConfig+0xe4>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d103      	bne.n	8002eec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	615a      	str	r2, [r3, #20]
}
 8002ef2:	bf00      	nop
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40010000 	.word	0x40010000
 8002f04:	40000400 	.word	0x40000400
 8002f08:	40000800 	.word	0x40000800
 8002f0c:	40000c00 	.word	0x40000c00
 8002f10:	40014000 	.word	0x40014000
 8002f14:	40014400 	.word	0x40014400
 8002f18:	40014800 	.word	0x40014800

08002f1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	f023 0201 	bic.w	r2, r3, #1
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f023 030a 	bic.w	r3, r3, #10
 8002f58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	621a      	str	r2, [r3, #32]
}
 8002f6e:	bf00      	nop
 8002f70:	371c      	adds	r7, #28
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b087      	sub	sp, #28
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	f023 0210 	bic.w	r2, r3, #16
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	031b      	lsls	r3, r3, #12
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fb6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	621a      	str	r2, [r3, #32]
}
 8002fce:	bf00      	nop
 8002fd0:	371c      	adds	r7, #28
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b085      	sub	sp, #20
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f043 0307 	orr.w	r3, r3, #7
 8002ffc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	609a      	str	r2, [r3, #8]
}
 8003004:	bf00      	nop
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003010:	b480      	push	{r7}
 8003012:	b087      	sub	sp, #28
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
 800301c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800302a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	021a      	lsls	r2, r3, #8
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	431a      	orrs	r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	4313      	orrs	r3, r2
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	4313      	orrs	r3, r2
 800303c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	609a      	str	r2, [r3, #8]
}
 8003044:	bf00      	nop
 8003046:	371c      	adds	r7, #28
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003064:	2302      	movs	r3, #2
 8003066:	e050      	b.n	800310a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800308e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	4313      	orrs	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a1c      	ldr	r2, [pc, #112]	; (8003118 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d018      	beq.n	80030de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b4:	d013      	beq.n	80030de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a18      	ldr	r2, [pc, #96]	; (800311c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d00e      	beq.n	80030de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a16      	ldr	r2, [pc, #88]	; (8003120 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d009      	beq.n	80030de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a15      	ldr	r2, [pc, #84]	; (8003124 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d004      	beq.n	80030de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a13      	ldr	r2, [pc, #76]	; (8003128 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d10c      	bne.n	80030f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	40010000 	.word	0x40010000
 800311c:	40000400 	.word	0x40000400
 8003120:	40000800 	.word	0x40000800
 8003124:	40000c00 	.word	0x40000c00
 8003128:	40014000 	.word	0x40014000

0800312c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e03f      	b.n	80031e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d106      	bne.n	8003180 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7fd fecc 	bl	8000f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2224      	movs	r2, #36	; 0x24
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003196:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 faad 	bl	80036f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	691a      	ldr	r2, [r3, #16]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695a      	ldr	r2, [r3, #20]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2220      	movs	r2, #32
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b08a      	sub	sp, #40	; 0x28
 80031f2:	af02      	add	r7, sp, #8
 80031f4:	60f8      	str	r0, [r7, #12]
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	603b      	str	r3, [r7, #0]
 80031fa:	4613      	mov	r3, r2
 80031fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031fe:	2300      	movs	r3, #0
 8003200:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b20      	cmp	r3, #32
 800320c:	d17c      	bne.n	8003308 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d002      	beq.n	800321a <HAL_UART_Transmit+0x2c>
 8003214:	88fb      	ldrh	r3, [r7, #6]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e075      	b.n	800330a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003224:	2b01      	cmp	r3, #1
 8003226:	d101      	bne.n	800322c <HAL_UART_Transmit+0x3e>
 8003228:	2302      	movs	r3, #2
 800322a:	e06e      	b.n	800330a <HAL_UART_Transmit+0x11c>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2221      	movs	r2, #33	; 0x21
 800323e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003242:	f7fe f87f 	bl	8001344 <HAL_GetTick>
 8003246:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	88fa      	ldrh	r2, [r7, #6]
 800324c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	88fa      	ldrh	r2, [r7, #6]
 8003252:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800325c:	d108      	bne.n	8003270 <HAL_UART_Transmit+0x82>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d104      	bne.n	8003270 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	61bb      	str	r3, [r7, #24]
 800326e:	e003      	b.n	8003278 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003274:	2300      	movs	r3, #0
 8003276:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003280:	e02a      	b.n	80032d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2200      	movs	r2, #0
 800328a:	2180      	movs	r1, #128	; 0x80
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 f940 	bl	8003512 <UART_WaitOnFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e036      	b.n	800330a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10b      	bne.n	80032ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	3302      	adds	r3, #2
 80032b6:	61bb      	str	r3, [r7, #24]
 80032b8:	e007      	b.n	80032ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	781a      	ldrb	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	3301      	adds	r3, #1
 80032c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032dc:	b29b      	uxth	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1cf      	bne.n	8003282 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2200      	movs	r2, #0
 80032ea:	2140      	movs	r1, #64	; 0x40
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 f910 	bl	8003512 <UART_WaitOnFlagUntilTimeout>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e006      	b.n	800330a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2220      	movs	r2, #32
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	e000      	b.n	800330a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003308:	2302      	movs	r3, #2
  }
}
 800330a:	4618      	mov	r0, r3
 800330c:	3720      	adds	r7, #32
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	4613      	mov	r3, r2
 800331e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b20      	cmp	r3, #32
 800332a:	d11d      	bne.n	8003368 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <HAL_UART_Receive_DMA+0x26>
 8003332:	88fb      	ldrh	r3, [r7, #6]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e016      	b.n	800336a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <HAL_UART_Receive_DMA+0x38>
 8003346:	2302      	movs	r3, #2
 8003348:	e00f      	b.n	800336a <HAL_UART_Receive_DMA+0x58>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8003358:	88fb      	ldrh	r3, [r7, #6]
 800335a:	461a      	mov	r2, r3
 800335c:	68b9      	ldr	r1, [r7, #8]
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 f922 	bl	80035a8 <UART_Start_Receive_DMA>
 8003364:	4603      	mov	r3, r0
 8003366:	e000      	b.n	800336a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003368:	2302      	movs	r3, #2
  }
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	460b      	mov	r3, r1
 80033a4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b084      	sub	sp, #16
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033be:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d12a      	bne.n	8003424 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033e2:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695a      	ldr	r2, [r3, #20]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0201 	bic.w	r2, r2, #1
 80033f2:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695a      	ldr	r2, [r3, #20]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003402:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	2b01      	cmp	r3, #1
 8003412:	d107      	bne.n	8003424 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68da      	ldr	r2, [r3, #12]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0210 	bic.w	r2, r2, #16
 8003422:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003428:	2b01      	cmp	r3, #1
 800342a:	d106      	bne.n	800343a <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003430:	4619      	mov	r1, r3
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f7ff ffb1 	bl	800339a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003438:	e002      	b.n	8003440 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f7fd faf2 	bl	8000a24 <HAL_UART_RxCpltCallback>
}
 8003440:	bf00      	nop
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003454:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	2b01      	cmp	r3, #1
 800345c:	d108      	bne.n	8003470 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003462:	085b      	lsrs	r3, r3, #1
 8003464:	b29b      	uxth	r3, r3
 8003466:	4619      	mov	r1, r3
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f7ff ff96 	bl	800339a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800346e:	e002      	b.n	8003476 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f7ff ff7e 	bl	8003372 <HAL_UART_RxHalfCpltCallback>
}
 8003476:	bf00      	nop
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b084      	sub	sp, #16
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349a:	2b80      	cmp	r3, #128	; 0x80
 800349c:	bf0c      	ite	eq
 800349e:	2301      	moveq	r3, #1
 80034a0:	2300      	movne	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b21      	cmp	r3, #33	; 0x21
 80034b0:	d108      	bne.n	80034c4 <UART_DMAError+0x46>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d005      	beq.n	80034c4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2200      	movs	r2, #0
 80034bc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80034be:	68b8      	ldr	r0, [r7, #8]
 80034c0:	f000 f8d6 	bl	8003670 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ce:	2b40      	cmp	r3, #64	; 0x40
 80034d0:	bf0c      	ite	eq
 80034d2:	2301      	moveq	r3, #1
 80034d4:	2300      	movne	r3, #0
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b22      	cmp	r3, #34	; 0x22
 80034e4:	d108      	bne.n	80034f8 <UART_DMAError+0x7a>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d005      	beq.n	80034f8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2200      	movs	r2, #0
 80034f0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80034f2:	68b8      	ldr	r0, [r7, #8]
 80034f4:	f000 f8d2 	bl	800369c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	f043 0210 	orr.w	r2, r3, #16
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003504:	68b8      	ldr	r0, [r7, #8]
 8003506:	f7ff ff3e 	bl	8003386 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800350a:	bf00      	nop
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b084      	sub	sp, #16
 8003516:	af00      	add	r7, sp, #0
 8003518:	60f8      	str	r0, [r7, #12]
 800351a:	60b9      	str	r1, [r7, #8]
 800351c:	603b      	str	r3, [r7, #0]
 800351e:	4613      	mov	r3, r2
 8003520:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003522:	e02c      	b.n	800357e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352a:	d028      	beq.n	800357e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d007      	beq.n	8003542 <UART_WaitOnFlagUntilTimeout+0x30>
 8003532:	f7fd ff07 	bl	8001344 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	429a      	cmp	r2, r3
 8003540:	d21d      	bcs.n	800357e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003550:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695a      	ldr	r2, [r3, #20]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0201 	bic.w	r2, r2, #1
 8003560:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2220      	movs	r2, #32
 8003566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e00f      	b.n	800359e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	4013      	ands	r3, r2
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	429a      	cmp	r2, r3
 800358c:	bf0c      	ite	eq
 800358e:	2301      	moveq	r3, #1
 8003590:	2300      	movne	r3, #0
 8003592:	b2db      	uxtb	r3, r3
 8003594:	461a      	mov	r2, r3
 8003596:	79fb      	ldrb	r3, [r7, #7]
 8003598:	429a      	cmp	r2, r3
 800359a:	d0c3      	beq.n	8003524 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
	...

080035a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	4613      	mov	r3, r2
 80035b4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	88fa      	ldrh	r2, [r7, #6]
 80035c0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2222      	movs	r2, #34	; 0x22
 80035cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d4:	4a23      	ldr	r2, [pc, #140]	; (8003664 <UART_Start_Receive_DMA+0xbc>)
 80035d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035dc:	4a22      	ldr	r2, [pc, #136]	; (8003668 <UART_Start_Receive_DMA+0xc0>)
 80035de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e4:	4a21      	ldr	r2, [pc, #132]	; (800366c <UART_Start_Receive_DMA+0xc4>)
 80035e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ec:	2200      	movs	r2, #0
 80035ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80035f0:	f107 0308 	add.w	r3, r7, #8
 80035f4:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	3304      	adds	r3, #4
 8003600:	4619      	mov	r1, r3
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	88fb      	ldrh	r3, [r7, #6]
 8003608:	f7fe f88c 	bl	8001724 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800360c:	2300      	movs	r3, #0
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	613b      	str	r3, [r7, #16]
 8003620:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003638:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	695a      	ldr	r2, [r3, #20]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f042 0201 	orr.w	r2, r2, #1
 8003648:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695a      	ldr	r2, [r3, #20]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003658:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	080033b3 	.word	0x080033b3
 8003668:	08003449 	.word	0x08003449
 800366c:	0800347f 	.word	0x0800347f

08003670 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003686:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80036b2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695a      	ldr	r2, [r3, #20]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0201 	bic.w	r2, r2, #1
 80036c2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d107      	bne.n	80036dc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0210 	bic.w	r2, r2, #16
 80036da:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2220      	movs	r2, #32
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
	...

080036f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036fc:	b09f      	sub	sp, #124	; 0x7c
 80036fe:	af00      	add	r7, sp, #0
 8003700:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800370c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800370e:	68d9      	ldr	r1, [r3, #12]
 8003710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	ea40 0301 	orr.w	r3, r0, r1
 8003718:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800371a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	431a      	orrs	r2, r3
 8003724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	431a      	orrs	r2, r3
 800372a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	4313      	orrs	r3, r2
 8003730:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800373c:	f021 010c 	bic.w	r1, r1, #12
 8003740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003746:	430b      	orrs	r3, r1
 8003748:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800374a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003756:	6999      	ldr	r1, [r3, #24]
 8003758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	ea40 0301 	orr.w	r3, r0, r1
 8003760:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	4bc5      	ldr	r3, [pc, #788]	; (8003a7c <UART_SetConfig+0x384>)
 8003768:	429a      	cmp	r2, r3
 800376a:	d004      	beq.n	8003776 <UART_SetConfig+0x7e>
 800376c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	4bc3      	ldr	r3, [pc, #780]	; (8003a80 <UART_SetConfig+0x388>)
 8003772:	429a      	cmp	r2, r3
 8003774:	d103      	bne.n	800377e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003776:	f7ff f867 	bl	8002848 <HAL_RCC_GetPCLK2Freq>
 800377a:	6778      	str	r0, [r7, #116]	; 0x74
 800377c:	e002      	b.n	8003784 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800377e:	f7ff f84f 	bl	8002820 <HAL_RCC_GetPCLK1Freq>
 8003782:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800378c:	f040 80b6 	bne.w	80038fc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003790:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003792:	461c      	mov	r4, r3
 8003794:	f04f 0500 	mov.w	r5, #0
 8003798:	4622      	mov	r2, r4
 800379a:	462b      	mov	r3, r5
 800379c:	1891      	adds	r1, r2, r2
 800379e:	6439      	str	r1, [r7, #64]	; 0x40
 80037a0:	415b      	adcs	r3, r3
 80037a2:	647b      	str	r3, [r7, #68]	; 0x44
 80037a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80037a8:	1912      	adds	r2, r2, r4
 80037aa:	eb45 0303 	adc.w	r3, r5, r3
 80037ae:	f04f 0000 	mov.w	r0, #0
 80037b2:	f04f 0100 	mov.w	r1, #0
 80037b6:	00d9      	lsls	r1, r3, #3
 80037b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037bc:	00d0      	lsls	r0, r2, #3
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	1911      	adds	r1, r2, r4
 80037c4:	6639      	str	r1, [r7, #96]	; 0x60
 80037c6:	416b      	adcs	r3, r5
 80037c8:	667b      	str	r3, [r7, #100]	; 0x64
 80037ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	461a      	mov	r2, r3
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	1891      	adds	r1, r2, r2
 80037d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80037d8:	415b      	adcs	r3, r3
 80037da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80037e0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80037e4:	f7fc ff40 	bl	8000668 <__aeabi_uldivmod>
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4ba5      	ldr	r3, [pc, #660]	; (8003a84 <UART_SetConfig+0x38c>)
 80037ee:	fba3 2302 	umull	r2, r3, r3, r2
 80037f2:	095b      	lsrs	r3, r3, #5
 80037f4:	011e      	lsls	r6, r3, #4
 80037f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037f8:	461c      	mov	r4, r3
 80037fa:	f04f 0500 	mov.w	r5, #0
 80037fe:	4622      	mov	r2, r4
 8003800:	462b      	mov	r3, r5
 8003802:	1891      	adds	r1, r2, r2
 8003804:	6339      	str	r1, [r7, #48]	; 0x30
 8003806:	415b      	adcs	r3, r3
 8003808:	637b      	str	r3, [r7, #52]	; 0x34
 800380a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800380e:	1912      	adds	r2, r2, r4
 8003810:	eb45 0303 	adc.w	r3, r5, r3
 8003814:	f04f 0000 	mov.w	r0, #0
 8003818:	f04f 0100 	mov.w	r1, #0
 800381c:	00d9      	lsls	r1, r3, #3
 800381e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003822:	00d0      	lsls	r0, r2, #3
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	1911      	adds	r1, r2, r4
 800382a:	65b9      	str	r1, [r7, #88]	; 0x58
 800382c:	416b      	adcs	r3, r5
 800382e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	461a      	mov	r2, r3
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	1891      	adds	r1, r2, r2
 800383c:	62b9      	str	r1, [r7, #40]	; 0x28
 800383e:	415b      	adcs	r3, r3
 8003840:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003842:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003846:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800384a:	f7fc ff0d 	bl	8000668 <__aeabi_uldivmod>
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	4b8c      	ldr	r3, [pc, #560]	; (8003a84 <UART_SetConfig+0x38c>)
 8003854:	fba3 1302 	umull	r1, r3, r3, r2
 8003858:	095b      	lsrs	r3, r3, #5
 800385a:	2164      	movs	r1, #100	; 0x64
 800385c:	fb01 f303 	mul.w	r3, r1, r3
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	3332      	adds	r3, #50	; 0x32
 8003866:	4a87      	ldr	r2, [pc, #540]	; (8003a84 <UART_SetConfig+0x38c>)
 8003868:	fba2 2303 	umull	r2, r3, r2, r3
 800386c:	095b      	lsrs	r3, r3, #5
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003874:	441e      	add	r6, r3
 8003876:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003878:	4618      	mov	r0, r3
 800387a:	f04f 0100 	mov.w	r1, #0
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	1894      	adds	r4, r2, r2
 8003884:	623c      	str	r4, [r7, #32]
 8003886:	415b      	adcs	r3, r3
 8003888:	627b      	str	r3, [r7, #36]	; 0x24
 800388a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800388e:	1812      	adds	r2, r2, r0
 8003890:	eb41 0303 	adc.w	r3, r1, r3
 8003894:	f04f 0400 	mov.w	r4, #0
 8003898:	f04f 0500 	mov.w	r5, #0
 800389c:	00dd      	lsls	r5, r3, #3
 800389e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80038a2:	00d4      	lsls	r4, r2, #3
 80038a4:	4622      	mov	r2, r4
 80038a6:	462b      	mov	r3, r5
 80038a8:	1814      	adds	r4, r2, r0
 80038aa:	653c      	str	r4, [r7, #80]	; 0x50
 80038ac:	414b      	adcs	r3, r1
 80038ae:	657b      	str	r3, [r7, #84]	; 0x54
 80038b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	461a      	mov	r2, r3
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	1891      	adds	r1, r2, r2
 80038bc:	61b9      	str	r1, [r7, #24]
 80038be:	415b      	adcs	r3, r3
 80038c0:	61fb      	str	r3, [r7, #28]
 80038c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80038ca:	f7fc fecd 	bl	8000668 <__aeabi_uldivmod>
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	4b6c      	ldr	r3, [pc, #432]	; (8003a84 <UART_SetConfig+0x38c>)
 80038d4:	fba3 1302 	umull	r1, r3, r3, r2
 80038d8:	095b      	lsrs	r3, r3, #5
 80038da:	2164      	movs	r1, #100	; 0x64
 80038dc:	fb01 f303 	mul.w	r3, r1, r3
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	3332      	adds	r3, #50	; 0x32
 80038e6:	4a67      	ldr	r2, [pc, #412]	; (8003a84 <UART_SetConfig+0x38c>)
 80038e8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ec:	095b      	lsrs	r3, r3, #5
 80038ee:	f003 0207 	and.w	r2, r3, #7
 80038f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4432      	add	r2, r6
 80038f8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038fa:	e0b9      	b.n	8003a70 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038fe:	461c      	mov	r4, r3
 8003900:	f04f 0500 	mov.w	r5, #0
 8003904:	4622      	mov	r2, r4
 8003906:	462b      	mov	r3, r5
 8003908:	1891      	adds	r1, r2, r2
 800390a:	6139      	str	r1, [r7, #16]
 800390c:	415b      	adcs	r3, r3
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003914:	1912      	adds	r2, r2, r4
 8003916:	eb45 0303 	adc.w	r3, r5, r3
 800391a:	f04f 0000 	mov.w	r0, #0
 800391e:	f04f 0100 	mov.w	r1, #0
 8003922:	00d9      	lsls	r1, r3, #3
 8003924:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003928:	00d0      	lsls	r0, r2, #3
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	eb12 0804 	adds.w	r8, r2, r4
 8003932:	eb43 0905 	adc.w	r9, r3, r5
 8003936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	4618      	mov	r0, r3
 800393c:	f04f 0100 	mov.w	r1, #0
 8003940:	f04f 0200 	mov.w	r2, #0
 8003944:	f04f 0300 	mov.w	r3, #0
 8003948:	008b      	lsls	r3, r1, #2
 800394a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800394e:	0082      	lsls	r2, r0, #2
 8003950:	4640      	mov	r0, r8
 8003952:	4649      	mov	r1, r9
 8003954:	f7fc fe88 	bl	8000668 <__aeabi_uldivmod>
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	4b49      	ldr	r3, [pc, #292]	; (8003a84 <UART_SetConfig+0x38c>)
 800395e:	fba3 2302 	umull	r2, r3, r3, r2
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	011e      	lsls	r6, r3, #4
 8003966:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003968:	4618      	mov	r0, r3
 800396a:	f04f 0100 	mov.w	r1, #0
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	1894      	adds	r4, r2, r2
 8003974:	60bc      	str	r4, [r7, #8]
 8003976:	415b      	adcs	r3, r3
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800397e:	1812      	adds	r2, r2, r0
 8003980:	eb41 0303 	adc.w	r3, r1, r3
 8003984:	f04f 0400 	mov.w	r4, #0
 8003988:	f04f 0500 	mov.w	r5, #0
 800398c:	00dd      	lsls	r5, r3, #3
 800398e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003992:	00d4      	lsls	r4, r2, #3
 8003994:	4622      	mov	r2, r4
 8003996:	462b      	mov	r3, r5
 8003998:	1814      	adds	r4, r2, r0
 800399a:	64bc      	str	r4, [r7, #72]	; 0x48
 800399c:	414b      	adcs	r3, r1
 800399e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f04f 0100 	mov.w	r1, #0
 80039aa:	f04f 0200 	mov.w	r2, #0
 80039ae:	f04f 0300 	mov.w	r3, #0
 80039b2:	008b      	lsls	r3, r1, #2
 80039b4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80039b8:	0082      	lsls	r2, r0, #2
 80039ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80039be:	f7fc fe53 	bl	8000668 <__aeabi_uldivmod>
 80039c2:	4602      	mov	r2, r0
 80039c4:	460b      	mov	r3, r1
 80039c6:	4b2f      	ldr	r3, [pc, #188]	; (8003a84 <UART_SetConfig+0x38c>)
 80039c8:	fba3 1302 	umull	r1, r3, r3, r2
 80039cc:	095b      	lsrs	r3, r3, #5
 80039ce:	2164      	movs	r1, #100	; 0x64
 80039d0:	fb01 f303 	mul.w	r3, r1, r3
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	3332      	adds	r3, #50	; 0x32
 80039da:	4a2a      	ldr	r2, [pc, #168]	; (8003a84 <UART_SetConfig+0x38c>)
 80039dc:	fba2 2303 	umull	r2, r3, r2, r3
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039e6:	441e      	add	r6, r3
 80039e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039ea:	4618      	mov	r0, r3
 80039ec:	f04f 0100 	mov.w	r1, #0
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	1894      	adds	r4, r2, r2
 80039f6:	603c      	str	r4, [r7, #0]
 80039f8:	415b      	adcs	r3, r3
 80039fa:	607b      	str	r3, [r7, #4]
 80039fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a00:	1812      	adds	r2, r2, r0
 8003a02:	eb41 0303 	adc.w	r3, r1, r3
 8003a06:	f04f 0400 	mov.w	r4, #0
 8003a0a:	f04f 0500 	mov.w	r5, #0
 8003a0e:	00dd      	lsls	r5, r3, #3
 8003a10:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a14:	00d4      	lsls	r4, r2, #3
 8003a16:	4622      	mov	r2, r4
 8003a18:	462b      	mov	r3, r5
 8003a1a:	eb12 0a00 	adds.w	sl, r2, r0
 8003a1e:	eb43 0b01 	adc.w	fp, r3, r1
 8003a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f04f 0100 	mov.w	r1, #0
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	008b      	lsls	r3, r1, #2
 8003a36:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a3a:	0082      	lsls	r2, r0, #2
 8003a3c:	4650      	mov	r0, sl
 8003a3e:	4659      	mov	r1, fp
 8003a40:	f7fc fe12 	bl	8000668 <__aeabi_uldivmod>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4b0e      	ldr	r3, [pc, #56]	; (8003a84 <UART_SetConfig+0x38c>)
 8003a4a:	fba3 1302 	umull	r1, r3, r3, r2
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	2164      	movs	r1, #100	; 0x64
 8003a52:	fb01 f303 	mul.w	r3, r1, r3
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	011b      	lsls	r3, r3, #4
 8003a5a:	3332      	adds	r3, #50	; 0x32
 8003a5c:	4a09      	ldr	r2, [pc, #36]	; (8003a84 <UART_SetConfig+0x38c>)
 8003a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	f003 020f 	and.w	r2, r3, #15
 8003a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4432      	add	r2, r6
 8003a6e:	609a      	str	r2, [r3, #8]
}
 8003a70:	bf00      	nop
 8003a72:	377c      	adds	r7, #124	; 0x7c
 8003a74:	46bd      	mov	sp, r7
 8003a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40011000 	.word	0x40011000
 8003a80:	40011400 	.word	0x40011400
 8003a84:	51eb851f 	.word	0x51eb851f

08003a88 <__errno>:
 8003a88:	4b01      	ldr	r3, [pc, #4]	; (8003a90 <__errno+0x8>)
 8003a8a:	6818      	ldr	r0, [r3, #0]
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	2000000c 	.word	0x2000000c

08003a94 <__sflush_r>:
 8003a94:	898a      	ldrh	r2, [r1, #12]
 8003a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a9a:	4605      	mov	r5, r0
 8003a9c:	0710      	lsls	r0, r2, #28
 8003a9e:	460c      	mov	r4, r1
 8003aa0:	d458      	bmi.n	8003b54 <__sflush_r+0xc0>
 8003aa2:	684b      	ldr	r3, [r1, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	dc05      	bgt.n	8003ab4 <__sflush_r+0x20>
 8003aa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	dc02      	bgt.n	8003ab4 <__sflush_r+0x20>
 8003aae:	2000      	movs	r0, #0
 8003ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ab4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ab6:	2e00      	cmp	r6, #0
 8003ab8:	d0f9      	beq.n	8003aae <__sflush_r+0x1a>
 8003aba:	2300      	movs	r3, #0
 8003abc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ac0:	682f      	ldr	r7, [r5, #0]
 8003ac2:	602b      	str	r3, [r5, #0]
 8003ac4:	d032      	beq.n	8003b2c <__sflush_r+0x98>
 8003ac6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ac8:	89a3      	ldrh	r3, [r4, #12]
 8003aca:	075a      	lsls	r2, r3, #29
 8003acc:	d505      	bpl.n	8003ada <__sflush_r+0x46>
 8003ace:	6863      	ldr	r3, [r4, #4]
 8003ad0:	1ac0      	subs	r0, r0, r3
 8003ad2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ad4:	b10b      	cbz	r3, 8003ada <__sflush_r+0x46>
 8003ad6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ad8:	1ac0      	subs	r0, r0, r3
 8003ada:	2300      	movs	r3, #0
 8003adc:	4602      	mov	r2, r0
 8003ade:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ae0:	6a21      	ldr	r1, [r4, #32]
 8003ae2:	4628      	mov	r0, r5
 8003ae4:	47b0      	blx	r6
 8003ae6:	1c43      	adds	r3, r0, #1
 8003ae8:	89a3      	ldrh	r3, [r4, #12]
 8003aea:	d106      	bne.n	8003afa <__sflush_r+0x66>
 8003aec:	6829      	ldr	r1, [r5, #0]
 8003aee:	291d      	cmp	r1, #29
 8003af0:	d82c      	bhi.n	8003b4c <__sflush_r+0xb8>
 8003af2:	4a2a      	ldr	r2, [pc, #168]	; (8003b9c <__sflush_r+0x108>)
 8003af4:	40ca      	lsrs	r2, r1
 8003af6:	07d6      	lsls	r6, r2, #31
 8003af8:	d528      	bpl.n	8003b4c <__sflush_r+0xb8>
 8003afa:	2200      	movs	r2, #0
 8003afc:	6062      	str	r2, [r4, #4]
 8003afe:	04d9      	lsls	r1, r3, #19
 8003b00:	6922      	ldr	r2, [r4, #16]
 8003b02:	6022      	str	r2, [r4, #0]
 8003b04:	d504      	bpl.n	8003b10 <__sflush_r+0x7c>
 8003b06:	1c42      	adds	r2, r0, #1
 8003b08:	d101      	bne.n	8003b0e <__sflush_r+0x7a>
 8003b0a:	682b      	ldr	r3, [r5, #0]
 8003b0c:	b903      	cbnz	r3, 8003b10 <__sflush_r+0x7c>
 8003b0e:	6560      	str	r0, [r4, #84]	; 0x54
 8003b10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b12:	602f      	str	r7, [r5, #0]
 8003b14:	2900      	cmp	r1, #0
 8003b16:	d0ca      	beq.n	8003aae <__sflush_r+0x1a>
 8003b18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b1c:	4299      	cmp	r1, r3
 8003b1e:	d002      	beq.n	8003b26 <__sflush_r+0x92>
 8003b20:	4628      	mov	r0, r5
 8003b22:	f000 f9b1 	bl	8003e88 <_free_r>
 8003b26:	2000      	movs	r0, #0
 8003b28:	6360      	str	r0, [r4, #52]	; 0x34
 8003b2a:	e7c1      	b.n	8003ab0 <__sflush_r+0x1c>
 8003b2c:	6a21      	ldr	r1, [r4, #32]
 8003b2e:	2301      	movs	r3, #1
 8003b30:	4628      	mov	r0, r5
 8003b32:	47b0      	blx	r6
 8003b34:	1c41      	adds	r1, r0, #1
 8003b36:	d1c7      	bne.n	8003ac8 <__sflush_r+0x34>
 8003b38:	682b      	ldr	r3, [r5, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0c4      	beq.n	8003ac8 <__sflush_r+0x34>
 8003b3e:	2b1d      	cmp	r3, #29
 8003b40:	d001      	beq.n	8003b46 <__sflush_r+0xb2>
 8003b42:	2b16      	cmp	r3, #22
 8003b44:	d101      	bne.n	8003b4a <__sflush_r+0xb6>
 8003b46:	602f      	str	r7, [r5, #0]
 8003b48:	e7b1      	b.n	8003aae <__sflush_r+0x1a>
 8003b4a:	89a3      	ldrh	r3, [r4, #12]
 8003b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b50:	81a3      	strh	r3, [r4, #12]
 8003b52:	e7ad      	b.n	8003ab0 <__sflush_r+0x1c>
 8003b54:	690f      	ldr	r7, [r1, #16]
 8003b56:	2f00      	cmp	r7, #0
 8003b58:	d0a9      	beq.n	8003aae <__sflush_r+0x1a>
 8003b5a:	0793      	lsls	r3, r2, #30
 8003b5c:	680e      	ldr	r6, [r1, #0]
 8003b5e:	bf08      	it	eq
 8003b60:	694b      	ldreq	r3, [r1, #20]
 8003b62:	600f      	str	r7, [r1, #0]
 8003b64:	bf18      	it	ne
 8003b66:	2300      	movne	r3, #0
 8003b68:	eba6 0807 	sub.w	r8, r6, r7
 8003b6c:	608b      	str	r3, [r1, #8]
 8003b6e:	f1b8 0f00 	cmp.w	r8, #0
 8003b72:	dd9c      	ble.n	8003aae <__sflush_r+0x1a>
 8003b74:	6a21      	ldr	r1, [r4, #32]
 8003b76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003b78:	4643      	mov	r3, r8
 8003b7a:	463a      	mov	r2, r7
 8003b7c:	4628      	mov	r0, r5
 8003b7e:	47b0      	blx	r6
 8003b80:	2800      	cmp	r0, #0
 8003b82:	dc06      	bgt.n	8003b92 <__sflush_r+0xfe>
 8003b84:	89a3      	ldrh	r3, [r4, #12]
 8003b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b8a:	81a3      	strh	r3, [r4, #12]
 8003b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b90:	e78e      	b.n	8003ab0 <__sflush_r+0x1c>
 8003b92:	4407      	add	r7, r0
 8003b94:	eba8 0800 	sub.w	r8, r8, r0
 8003b98:	e7e9      	b.n	8003b6e <__sflush_r+0xda>
 8003b9a:	bf00      	nop
 8003b9c:	20400001 	.word	0x20400001

08003ba0 <_fflush_r>:
 8003ba0:	b538      	push	{r3, r4, r5, lr}
 8003ba2:	690b      	ldr	r3, [r1, #16]
 8003ba4:	4605      	mov	r5, r0
 8003ba6:	460c      	mov	r4, r1
 8003ba8:	b913      	cbnz	r3, 8003bb0 <_fflush_r+0x10>
 8003baa:	2500      	movs	r5, #0
 8003bac:	4628      	mov	r0, r5
 8003bae:	bd38      	pop	{r3, r4, r5, pc}
 8003bb0:	b118      	cbz	r0, 8003bba <_fflush_r+0x1a>
 8003bb2:	6983      	ldr	r3, [r0, #24]
 8003bb4:	b90b      	cbnz	r3, 8003bba <_fflush_r+0x1a>
 8003bb6:	f000 f899 	bl	8003cec <__sinit>
 8003bba:	4b14      	ldr	r3, [pc, #80]	; (8003c0c <_fflush_r+0x6c>)
 8003bbc:	429c      	cmp	r4, r3
 8003bbe:	d11b      	bne.n	8003bf8 <_fflush_r+0x58>
 8003bc0:	686c      	ldr	r4, [r5, #4]
 8003bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0ef      	beq.n	8003baa <_fflush_r+0xa>
 8003bca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003bcc:	07d0      	lsls	r0, r2, #31
 8003bce:	d404      	bmi.n	8003bda <_fflush_r+0x3a>
 8003bd0:	0599      	lsls	r1, r3, #22
 8003bd2:	d402      	bmi.n	8003bda <_fflush_r+0x3a>
 8003bd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bd6:	f000 f94c 	bl	8003e72 <__retarget_lock_acquire_recursive>
 8003bda:	4628      	mov	r0, r5
 8003bdc:	4621      	mov	r1, r4
 8003bde:	f7ff ff59 	bl	8003a94 <__sflush_r>
 8003be2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003be4:	07da      	lsls	r2, r3, #31
 8003be6:	4605      	mov	r5, r0
 8003be8:	d4e0      	bmi.n	8003bac <_fflush_r+0xc>
 8003bea:	89a3      	ldrh	r3, [r4, #12]
 8003bec:	059b      	lsls	r3, r3, #22
 8003bee:	d4dd      	bmi.n	8003bac <_fflush_r+0xc>
 8003bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bf2:	f000 f93f 	bl	8003e74 <__retarget_lock_release_recursive>
 8003bf6:	e7d9      	b.n	8003bac <_fflush_r+0xc>
 8003bf8:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <_fflush_r+0x70>)
 8003bfa:	429c      	cmp	r4, r3
 8003bfc:	d101      	bne.n	8003c02 <_fflush_r+0x62>
 8003bfe:	68ac      	ldr	r4, [r5, #8]
 8003c00:	e7df      	b.n	8003bc2 <_fflush_r+0x22>
 8003c02:	4b04      	ldr	r3, [pc, #16]	; (8003c14 <_fflush_r+0x74>)
 8003c04:	429c      	cmp	r4, r3
 8003c06:	bf08      	it	eq
 8003c08:	68ec      	ldreq	r4, [r5, #12]
 8003c0a:	e7da      	b.n	8003bc2 <_fflush_r+0x22>
 8003c0c:	08004a74 	.word	0x08004a74
 8003c10:	08004a94 	.word	0x08004a94
 8003c14:	08004a54 	.word	0x08004a54

08003c18 <fflush>:
 8003c18:	4601      	mov	r1, r0
 8003c1a:	b920      	cbnz	r0, 8003c26 <fflush+0xe>
 8003c1c:	4b04      	ldr	r3, [pc, #16]	; (8003c30 <fflush+0x18>)
 8003c1e:	4905      	ldr	r1, [pc, #20]	; (8003c34 <fflush+0x1c>)
 8003c20:	6818      	ldr	r0, [r3, #0]
 8003c22:	f000 b8e1 	b.w	8003de8 <_fwalk_reent>
 8003c26:	4b04      	ldr	r3, [pc, #16]	; (8003c38 <fflush+0x20>)
 8003c28:	6818      	ldr	r0, [r3, #0]
 8003c2a:	f7ff bfb9 	b.w	8003ba0 <_fflush_r>
 8003c2e:	bf00      	nop
 8003c30:	08004ab4 	.word	0x08004ab4
 8003c34:	08003ba1 	.word	0x08003ba1
 8003c38:	2000000c 	.word	0x2000000c

08003c3c <std>:
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	b510      	push	{r4, lr}
 8003c40:	4604      	mov	r4, r0
 8003c42:	e9c0 3300 	strd	r3, r3, [r0]
 8003c46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c4a:	6083      	str	r3, [r0, #8]
 8003c4c:	8181      	strh	r1, [r0, #12]
 8003c4e:	6643      	str	r3, [r0, #100]	; 0x64
 8003c50:	81c2      	strh	r2, [r0, #14]
 8003c52:	6183      	str	r3, [r0, #24]
 8003c54:	4619      	mov	r1, r3
 8003c56:	2208      	movs	r2, #8
 8003c58:	305c      	adds	r0, #92	; 0x5c
 8003c5a:	f000 f90c 	bl	8003e76 <memset>
 8003c5e:	4b05      	ldr	r3, [pc, #20]	; (8003c74 <std+0x38>)
 8003c60:	6263      	str	r3, [r4, #36]	; 0x24
 8003c62:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <std+0x3c>)
 8003c64:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c66:	4b05      	ldr	r3, [pc, #20]	; (8003c7c <std+0x40>)
 8003c68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c6a:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <std+0x44>)
 8003c6c:	6224      	str	r4, [r4, #32]
 8003c6e:	6323      	str	r3, [r4, #48]	; 0x30
 8003c70:	bd10      	pop	{r4, pc}
 8003c72:	bf00      	nop
 8003c74:	0800402d 	.word	0x0800402d
 8003c78:	0800404f 	.word	0x0800404f
 8003c7c:	08004087 	.word	0x08004087
 8003c80:	080040ab 	.word	0x080040ab

08003c84 <_cleanup_r>:
 8003c84:	4901      	ldr	r1, [pc, #4]	; (8003c8c <_cleanup_r+0x8>)
 8003c86:	f000 b8af 	b.w	8003de8 <_fwalk_reent>
 8003c8a:	bf00      	nop
 8003c8c:	08003ba1 	.word	0x08003ba1

08003c90 <__sfmoreglue>:
 8003c90:	b570      	push	{r4, r5, r6, lr}
 8003c92:	1e4a      	subs	r2, r1, #1
 8003c94:	2568      	movs	r5, #104	; 0x68
 8003c96:	4355      	muls	r5, r2
 8003c98:	460e      	mov	r6, r1
 8003c9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003c9e:	f000 f943 	bl	8003f28 <_malloc_r>
 8003ca2:	4604      	mov	r4, r0
 8003ca4:	b140      	cbz	r0, 8003cb8 <__sfmoreglue+0x28>
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	e9c0 1600 	strd	r1, r6, [r0]
 8003cac:	300c      	adds	r0, #12
 8003cae:	60a0      	str	r0, [r4, #8]
 8003cb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003cb4:	f000 f8df 	bl	8003e76 <memset>
 8003cb8:	4620      	mov	r0, r4
 8003cba:	bd70      	pop	{r4, r5, r6, pc}

08003cbc <__sfp_lock_acquire>:
 8003cbc:	4801      	ldr	r0, [pc, #4]	; (8003cc4 <__sfp_lock_acquire+0x8>)
 8003cbe:	f000 b8d8 	b.w	8003e72 <__retarget_lock_acquire_recursive>
 8003cc2:	bf00      	nop
 8003cc4:	20000298 	.word	0x20000298

08003cc8 <__sfp_lock_release>:
 8003cc8:	4801      	ldr	r0, [pc, #4]	; (8003cd0 <__sfp_lock_release+0x8>)
 8003cca:	f000 b8d3 	b.w	8003e74 <__retarget_lock_release_recursive>
 8003cce:	bf00      	nop
 8003cd0:	20000298 	.word	0x20000298

08003cd4 <__sinit_lock_acquire>:
 8003cd4:	4801      	ldr	r0, [pc, #4]	; (8003cdc <__sinit_lock_acquire+0x8>)
 8003cd6:	f000 b8cc 	b.w	8003e72 <__retarget_lock_acquire_recursive>
 8003cda:	bf00      	nop
 8003cdc:	20000293 	.word	0x20000293

08003ce0 <__sinit_lock_release>:
 8003ce0:	4801      	ldr	r0, [pc, #4]	; (8003ce8 <__sinit_lock_release+0x8>)
 8003ce2:	f000 b8c7 	b.w	8003e74 <__retarget_lock_release_recursive>
 8003ce6:	bf00      	nop
 8003ce8:	20000293 	.word	0x20000293

08003cec <__sinit>:
 8003cec:	b510      	push	{r4, lr}
 8003cee:	4604      	mov	r4, r0
 8003cf0:	f7ff fff0 	bl	8003cd4 <__sinit_lock_acquire>
 8003cf4:	69a3      	ldr	r3, [r4, #24]
 8003cf6:	b11b      	cbz	r3, 8003d00 <__sinit+0x14>
 8003cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cfc:	f7ff bff0 	b.w	8003ce0 <__sinit_lock_release>
 8003d00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003d04:	6523      	str	r3, [r4, #80]	; 0x50
 8003d06:	4b13      	ldr	r3, [pc, #76]	; (8003d54 <__sinit+0x68>)
 8003d08:	4a13      	ldr	r2, [pc, #76]	; (8003d58 <__sinit+0x6c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8003d0e:	42a3      	cmp	r3, r4
 8003d10:	bf04      	itt	eq
 8003d12:	2301      	moveq	r3, #1
 8003d14:	61a3      	streq	r3, [r4, #24]
 8003d16:	4620      	mov	r0, r4
 8003d18:	f000 f820 	bl	8003d5c <__sfp>
 8003d1c:	6060      	str	r0, [r4, #4]
 8003d1e:	4620      	mov	r0, r4
 8003d20:	f000 f81c 	bl	8003d5c <__sfp>
 8003d24:	60a0      	str	r0, [r4, #8]
 8003d26:	4620      	mov	r0, r4
 8003d28:	f000 f818 	bl	8003d5c <__sfp>
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	60e0      	str	r0, [r4, #12]
 8003d30:	2104      	movs	r1, #4
 8003d32:	6860      	ldr	r0, [r4, #4]
 8003d34:	f7ff ff82 	bl	8003c3c <std>
 8003d38:	68a0      	ldr	r0, [r4, #8]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	2109      	movs	r1, #9
 8003d3e:	f7ff ff7d 	bl	8003c3c <std>
 8003d42:	68e0      	ldr	r0, [r4, #12]
 8003d44:	2202      	movs	r2, #2
 8003d46:	2112      	movs	r1, #18
 8003d48:	f7ff ff78 	bl	8003c3c <std>
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	61a3      	str	r3, [r4, #24]
 8003d50:	e7d2      	b.n	8003cf8 <__sinit+0xc>
 8003d52:	bf00      	nop
 8003d54:	08004ab4 	.word	0x08004ab4
 8003d58:	08003c85 	.word	0x08003c85

08003d5c <__sfp>:
 8003d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5e:	4607      	mov	r7, r0
 8003d60:	f7ff ffac 	bl	8003cbc <__sfp_lock_acquire>
 8003d64:	4b1e      	ldr	r3, [pc, #120]	; (8003de0 <__sfp+0x84>)
 8003d66:	681e      	ldr	r6, [r3, #0]
 8003d68:	69b3      	ldr	r3, [r6, #24]
 8003d6a:	b913      	cbnz	r3, 8003d72 <__sfp+0x16>
 8003d6c:	4630      	mov	r0, r6
 8003d6e:	f7ff ffbd 	bl	8003cec <__sinit>
 8003d72:	3648      	adds	r6, #72	; 0x48
 8003d74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	d503      	bpl.n	8003d84 <__sfp+0x28>
 8003d7c:	6833      	ldr	r3, [r6, #0]
 8003d7e:	b30b      	cbz	r3, 8003dc4 <__sfp+0x68>
 8003d80:	6836      	ldr	r6, [r6, #0]
 8003d82:	e7f7      	b.n	8003d74 <__sfp+0x18>
 8003d84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003d88:	b9d5      	cbnz	r5, 8003dc0 <__sfp+0x64>
 8003d8a:	4b16      	ldr	r3, [pc, #88]	; (8003de4 <__sfp+0x88>)
 8003d8c:	60e3      	str	r3, [r4, #12]
 8003d8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003d92:	6665      	str	r5, [r4, #100]	; 0x64
 8003d94:	f000 f86c 	bl	8003e70 <__retarget_lock_init_recursive>
 8003d98:	f7ff ff96 	bl	8003cc8 <__sfp_lock_release>
 8003d9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003da0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003da4:	6025      	str	r5, [r4, #0]
 8003da6:	61a5      	str	r5, [r4, #24]
 8003da8:	2208      	movs	r2, #8
 8003daa:	4629      	mov	r1, r5
 8003dac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003db0:	f000 f861 	bl	8003e76 <memset>
 8003db4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003db8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003dbc:	4620      	mov	r0, r4
 8003dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dc0:	3468      	adds	r4, #104	; 0x68
 8003dc2:	e7d9      	b.n	8003d78 <__sfp+0x1c>
 8003dc4:	2104      	movs	r1, #4
 8003dc6:	4638      	mov	r0, r7
 8003dc8:	f7ff ff62 	bl	8003c90 <__sfmoreglue>
 8003dcc:	4604      	mov	r4, r0
 8003dce:	6030      	str	r0, [r6, #0]
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	d1d5      	bne.n	8003d80 <__sfp+0x24>
 8003dd4:	f7ff ff78 	bl	8003cc8 <__sfp_lock_release>
 8003dd8:	230c      	movs	r3, #12
 8003dda:	603b      	str	r3, [r7, #0]
 8003ddc:	e7ee      	b.n	8003dbc <__sfp+0x60>
 8003dde:	bf00      	nop
 8003de0:	08004ab4 	.word	0x08004ab4
 8003de4:	ffff0001 	.word	0xffff0001

08003de8 <_fwalk_reent>:
 8003de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dec:	4606      	mov	r6, r0
 8003dee:	4688      	mov	r8, r1
 8003df0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003df4:	2700      	movs	r7, #0
 8003df6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003dfa:	f1b9 0901 	subs.w	r9, r9, #1
 8003dfe:	d505      	bpl.n	8003e0c <_fwalk_reent+0x24>
 8003e00:	6824      	ldr	r4, [r4, #0]
 8003e02:	2c00      	cmp	r4, #0
 8003e04:	d1f7      	bne.n	8003df6 <_fwalk_reent+0xe>
 8003e06:	4638      	mov	r0, r7
 8003e08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e0c:	89ab      	ldrh	r3, [r5, #12]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d907      	bls.n	8003e22 <_fwalk_reent+0x3a>
 8003e12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e16:	3301      	adds	r3, #1
 8003e18:	d003      	beq.n	8003e22 <_fwalk_reent+0x3a>
 8003e1a:	4629      	mov	r1, r5
 8003e1c:	4630      	mov	r0, r6
 8003e1e:	47c0      	blx	r8
 8003e20:	4307      	orrs	r7, r0
 8003e22:	3568      	adds	r5, #104	; 0x68
 8003e24:	e7e9      	b.n	8003dfa <_fwalk_reent+0x12>
	...

08003e28 <__libc_init_array>:
 8003e28:	b570      	push	{r4, r5, r6, lr}
 8003e2a:	4d0d      	ldr	r5, [pc, #52]	; (8003e60 <__libc_init_array+0x38>)
 8003e2c:	4c0d      	ldr	r4, [pc, #52]	; (8003e64 <__libc_init_array+0x3c>)
 8003e2e:	1b64      	subs	r4, r4, r5
 8003e30:	10a4      	asrs	r4, r4, #2
 8003e32:	2600      	movs	r6, #0
 8003e34:	42a6      	cmp	r6, r4
 8003e36:	d109      	bne.n	8003e4c <__libc_init_array+0x24>
 8003e38:	4d0b      	ldr	r5, [pc, #44]	; (8003e68 <__libc_init_array+0x40>)
 8003e3a:	4c0c      	ldr	r4, [pc, #48]	; (8003e6c <__libc_init_array+0x44>)
 8003e3c:	f000 fdc0 	bl	80049c0 <_init>
 8003e40:	1b64      	subs	r4, r4, r5
 8003e42:	10a4      	asrs	r4, r4, #2
 8003e44:	2600      	movs	r6, #0
 8003e46:	42a6      	cmp	r6, r4
 8003e48:	d105      	bne.n	8003e56 <__libc_init_array+0x2e>
 8003e4a:	bd70      	pop	{r4, r5, r6, pc}
 8003e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e50:	4798      	blx	r3
 8003e52:	3601      	adds	r6, #1
 8003e54:	e7ee      	b.n	8003e34 <__libc_init_array+0xc>
 8003e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e5a:	4798      	blx	r3
 8003e5c:	3601      	adds	r6, #1
 8003e5e:	e7f2      	b.n	8003e46 <__libc_init_array+0x1e>
 8003e60:	08004af4 	.word	0x08004af4
 8003e64:	08004af4 	.word	0x08004af4
 8003e68:	08004af4 	.word	0x08004af4
 8003e6c:	08004af8 	.word	0x08004af8

08003e70 <__retarget_lock_init_recursive>:
 8003e70:	4770      	bx	lr

08003e72 <__retarget_lock_acquire_recursive>:
 8003e72:	4770      	bx	lr

08003e74 <__retarget_lock_release_recursive>:
 8003e74:	4770      	bx	lr

08003e76 <memset>:
 8003e76:	4402      	add	r2, r0
 8003e78:	4603      	mov	r3, r0
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d100      	bne.n	8003e80 <memset+0xa>
 8003e7e:	4770      	bx	lr
 8003e80:	f803 1b01 	strb.w	r1, [r3], #1
 8003e84:	e7f9      	b.n	8003e7a <memset+0x4>
	...

08003e88 <_free_r>:
 8003e88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e8a:	2900      	cmp	r1, #0
 8003e8c:	d048      	beq.n	8003f20 <_free_r+0x98>
 8003e8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e92:	9001      	str	r0, [sp, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f1a1 0404 	sub.w	r4, r1, #4
 8003e9a:	bfb8      	it	lt
 8003e9c:	18e4      	addlt	r4, r4, r3
 8003e9e:	f000 f93d 	bl	800411c <__malloc_lock>
 8003ea2:	4a20      	ldr	r2, [pc, #128]	; (8003f24 <_free_r+0x9c>)
 8003ea4:	9801      	ldr	r0, [sp, #4]
 8003ea6:	6813      	ldr	r3, [r2, #0]
 8003ea8:	4615      	mov	r5, r2
 8003eaa:	b933      	cbnz	r3, 8003eba <_free_r+0x32>
 8003eac:	6063      	str	r3, [r4, #4]
 8003eae:	6014      	str	r4, [r2, #0]
 8003eb0:	b003      	add	sp, #12
 8003eb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003eb6:	f000 b937 	b.w	8004128 <__malloc_unlock>
 8003eba:	42a3      	cmp	r3, r4
 8003ebc:	d90b      	bls.n	8003ed6 <_free_r+0x4e>
 8003ebe:	6821      	ldr	r1, [r4, #0]
 8003ec0:	1862      	adds	r2, r4, r1
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	bf04      	itt	eq
 8003ec6:	681a      	ldreq	r2, [r3, #0]
 8003ec8:	685b      	ldreq	r3, [r3, #4]
 8003eca:	6063      	str	r3, [r4, #4]
 8003ecc:	bf04      	itt	eq
 8003ece:	1852      	addeq	r2, r2, r1
 8003ed0:	6022      	streq	r2, [r4, #0]
 8003ed2:	602c      	str	r4, [r5, #0]
 8003ed4:	e7ec      	b.n	8003eb0 <_free_r+0x28>
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	b10b      	cbz	r3, 8003ee0 <_free_r+0x58>
 8003edc:	42a3      	cmp	r3, r4
 8003ede:	d9fa      	bls.n	8003ed6 <_free_r+0x4e>
 8003ee0:	6811      	ldr	r1, [r2, #0]
 8003ee2:	1855      	adds	r5, r2, r1
 8003ee4:	42a5      	cmp	r5, r4
 8003ee6:	d10b      	bne.n	8003f00 <_free_r+0x78>
 8003ee8:	6824      	ldr	r4, [r4, #0]
 8003eea:	4421      	add	r1, r4
 8003eec:	1854      	adds	r4, r2, r1
 8003eee:	42a3      	cmp	r3, r4
 8003ef0:	6011      	str	r1, [r2, #0]
 8003ef2:	d1dd      	bne.n	8003eb0 <_free_r+0x28>
 8003ef4:	681c      	ldr	r4, [r3, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	6053      	str	r3, [r2, #4]
 8003efa:	4421      	add	r1, r4
 8003efc:	6011      	str	r1, [r2, #0]
 8003efe:	e7d7      	b.n	8003eb0 <_free_r+0x28>
 8003f00:	d902      	bls.n	8003f08 <_free_r+0x80>
 8003f02:	230c      	movs	r3, #12
 8003f04:	6003      	str	r3, [r0, #0]
 8003f06:	e7d3      	b.n	8003eb0 <_free_r+0x28>
 8003f08:	6825      	ldr	r5, [r4, #0]
 8003f0a:	1961      	adds	r1, r4, r5
 8003f0c:	428b      	cmp	r3, r1
 8003f0e:	bf04      	itt	eq
 8003f10:	6819      	ldreq	r1, [r3, #0]
 8003f12:	685b      	ldreq	r3, [r3, #4]
 8003f14:	6063      	str	r3, [r4, #4]
 8003f16:	bf04      	itt	eq
 8003f18:	1949      	addeq	r1, r1, r5
 8003f1a:	6021      	streq	r1, [r4, #0]
 8003f1c:	6054      	str	r4, [r2, #4]
 8003f1e:	e7c7      	b.n	8003eb0 <_free_r+0x28>
 8003f20:	b003      	add	sp, #12
 8003f22:	bd30      	pop	{r4, r5, pc}
 8003f24:	20000198 	.word	0x20000198

08003f28 <_malloc_r>:
 8003f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2a:	1ccd      	adds	r5, r1, #3
 8003f2c:	f025 0503 	bic.w	r5, r5, #3
 8003f30:	3508      	adds	r5, #8
 8003f32:	2d0c      	cmp	r5, #12
 8003f34:	bf38      	it	cc
 8003f36:	250c      	movcc	r5, #12
 8003f38:	2d00      	cmp	r5, #0
 8003f3a:	4606      	mov	r6, r0
 8003f3c:	db01      	blt.n	8003f42 <_malloc_r+0x1a>
 8003f3e:	42a9      	cmp	r1, r5
 8003f40:	d903      	bls.n	8003f4a <_malloc_r+0x22>
 8003f42:	230c      	movs	r3, #12
 8003f44:	6033      	str	r3, [r6, #0]
 8003f46:	2000      	movs	r0, #0
 8003f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f4a:	f000 f8e7 	bl	800411c <__malloc_lock>
 8003f4e:	4921      	ldr	r1, [pc, #132]	; (8003fd4 <_malloc_r+0xac>)
 8003f50:	680a      	ldr	r2, [r1, #0]
 8003f52:	4614      	mov	r4, r2
 8003f54:	b99c      	cbnz	r4, 8003f7e <_malloc_r+0x56>
 8003f56:	4f20      	ldr	r7, [pc, #128]	; (8003fd8 <_malloc_r+0xb0>)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	b923      	cbnz	r3, 8003f66 <_malloc_r+0x3e>
 8003f5c:	4621      	mov	r1, r4
 8003f5e:	4630      	mov	r0, r6
 8003f60:	f000 f854 	bl	800400c <_sbrk_r>
 8003f64:	6038      	str	r0, [r7, #0]
 8003f66:	4629      	mov	r1, r5
 8003f68:	4630      	mov	r0, r6
 8003f6a:	f000 f84f 	bl	800400c <_sbrk_r>
 8003f6e:	1c43      	adds	r3, r0, #1
 8003f70:	d123      	bne.n	8003fba <_malloc_r+0x92>
 8003f72:	230c      	movs	r3, #12
 8003f74:	6033      	str	r3, [r6, #0]
 8003f76:	4630      	mov	r0, r6
 8003f78:	f000 f8d6 	bl	8004128 <__malloc_unlock>
 8003f7c:	e7e3      	b.n	8003f46 <_malloc_r+0x1e>
 8003f7e:	6823      	ldr	r3, [r4, #0]
 8003f80:	1b5b      	subs	r3, r3, r5
 8003f82:	d417      	bmi.n	8003fb4 <_malloc_r+0x8c>
 8003f84:	2b0b      	cmp	r3, #11
 8003f86:	d903      	bls.n	8003f90 <_malloc_r+0x68>
 8003f88:	6023      	str	r3, [r4, #0]
 8003f8a:	441c      	add	r4, r3
 8003f8c:	6025      	str	r5, [r4, #0]
 8003f8e:	e004      	b.n	8003f9a <_malloc_r+0x72>
 8003f90:	6863      	ldr	r3, [r4, #4]
 8003f92:	42a2      	cmp	r2, r4
 8003f94:	bf0c      	ite	eq
 8003f96:	600b      	streq	r3, [r1, #0]
 8003f98:	6053      	strne	r3, [r2, #4]
 8003f9a:	4630      	mov	r0, r6
 8003f9c:	f000 f8c4 	bl	8004128 <__malloc_unlock>
 8003fa0:	f104 000b 	add.w	r0, r4, #11
 8003fa4:	1d23      	adds	r3, r4, #4
 8003fa6:	f020 0007 	bic.w	r0, r0, #7
 8003faa:	1ac2      	subs	r2, r0, r3
 8003fac:	d0cc      	beq.n	8003f48 <_malloc_r+0x20>
 8003fae:	1a1b      	subs	r3, r3, r0
 8003fb0:	50a3      	str	r3, [r4, r2]
 8003fb2:	e7c9      	b.n	8003f48 <_malloc_r+0x20>
 8003fb4:	4622      	mov	r2, r4
 8003fb6:	6864      	ldr	r4, [r4, #4]
 8003fb8:	e7cc      	b.n	8003f54 <_malloc_r+0x2c>
 8003fba:	1cc4      	adds	r4, r0, #3
 8003fbc:	f024 0403 	bic.w	r4, r4, #3
 8003fc0:	42a0      	cmp	r0, r4
 8003fc2:	d0e3      	beq.n	8003f8c <_malloc_r+0x64>
 8003fc4:	1a21      	subs	r1, r4, r0
 8003fc6:	4630      	mov	r0, r6
 8003fc8:	f000 f820 	bl	800400c <_sbrk_r>
 8003fcc:	3001      	adds	r0, #1
 8003fce:	d1dd      	bne.n	8003f8c <_malloc_r+0x64>
 8003fd0:	e7cf      	b.n	8003f72 <_malloc_r+0x4a>
 8003fd2:	bf00      	nop
 8003fd4:	20000198 	.word	0x20000198
 8003fd8:	2000019c 	.word	0x2000019c

08003fdc <iprintf>:
 8003fdc:	b40f      	push	{r0, r1, r2, r3}
 8003fde:	4b0a      	ldr	r3, [pc, #40]	; (8004008 <iprintf+0x2c>)
 8003fe0:	b513      	push	{r0, r1, r4, lr}
 8003fe2:	681c      	ldr	r4, [r3, #0]
 8003fe4:	b124      	cbz	r4, 8003ff0 <iprintf+0x14>
 8003fe6:	69a3      	ldr	r3, [r4, #24]
 8003fe8:	b913      	cbnz	r3, 8003ff0 <iprintf+0x14>
 8003fea:	4620      	mov	r0, r4
 8003fec:	f7ff fe7e 	bl	8003cec <__sinit>
 8003ff0:	ab05      	add	r3, sp, #20
 8003ff2:	9a04      	ldr	r2, [sp, #16]
 8003ff4:	68a1      	ldr	r1, [r4, #8]
 8003ff6:	9301      	str	r3, [sp, #4]
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	f000 f8c5 	bl	8004188 <_vfiprintf_r>
 8003ffe:	b002      	add	sp, #8
 8004000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004004:	b004      	add	sp, #16
 8004006:	4770      	bx	lr
 8004008:	2000000c 	.word	0x2000000c

0800400c <_sbrk_r>:
 800400c:	b538      	push	{r3, r4, r5, lr}
 800400e:	4d06      	ldr	r5, [pc, #24]	; (8004028 <_sbrk_r+0x1c>)
 8004010:	2300      	movs	r3, #0
 8004012:	4604      	mov	r4, r0
 8004014:	4608      	mov	r0, r1
 8004016:	602b      	str	r3, [r5, #0]
 8004018:	f7fd f8bc 	bl	8001194 <_sbrk>
 800401c:	1c43      	adds	r3, r0, #1
 800401e:	d102      	bne.n	8004026 <_sbrk_r+0x1a>
 8004020:	682b      	ldr	r3, [r5, #0]
 8004022:	b103      	cbz	r3, 8004026 <_sbrk_r+0x1a>
 8004024:	6023      	str	r3, [r4, #0]
 8004026:	bd38      	pop	{r3, r4, r5, pc}
 8004028:	2000029c 	.word	0x2000029c

0800402c <__sread>:
 800402c:	b510      	push	{r4, lr}
 800402e:	460c      	mov	r4, r1
 8004030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004034:	f000 fb6c 	bl	8004710 <_read_r>
 8004038:	2800      	cmp	r0, #0
 800403a:	bfab      	itete	ge
 800403c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800403e:	89a3      	ldrhlt	r3, [r4, #12]
 8004040:	181b      	addge	r3, r3, r0
 8004042:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004046:	bfac      	ite	ge
 8004048:	6563      	strge	r3, [r4, #84]	; 0x54
 800404a:	81a3      	strhlt	r3, [r4, #12]
 800404c:	bd10      	pop	{r4, pc}

0800404e <__swrite>:
 800404e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004052:	461f      	mov	r7, r3
 8004054:	898b      	ldrh	r3, [r1, #12]
 8004056:	05db      	lsls	r3, r3, #23
 8004058:	4605      	mov	r5, r0
 800405a:	460c      	mov	r4, r1
 800405c:	4616      	mov	r6, r2
 800405e:	d505      	bpl.n	800406c <__swrite+0x1e>
 8004060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004064:	2302      	movs	r3, #2
 8004066:	2200      	movs	r2, #0
 8004068:	f000 f846 	bl	80040f8 <_lseek_r>
 800406c:	89a3      	ldrh	r3, [r4, #12]
 800406e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004072:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004076:	81a3      	strh	r3, [r4, #12]
 8004078:	4632      	mov	r2, r6
 800407a:	463b      	mov	r3, r7
 800407c:	4628      	mov	r0, r5
 800407e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004082:	f000 b817 	b.w	80040b4 <_write_r>

08004086 <__sseek>:
 8004086:	b510      	push	{r4, lr}
 8004088:	460c      	mov	r4, r1
 800408a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800408e:	f000 f833 	bl	80040f8 <_lseek_r>
 8004092:	1c43      	adds	r3, r0, #1
 8004094:	89a3      	ldrh	r3, [r4, #12]
 8004096:	bf15      	itete	ne
 8004098:	6560      	strne	r0, [r4, #84]	; 0x54
 800409a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800409e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80040a2:	81a3      	strheq	r3, [r4, #12]
 80040a4:	bf18      	it	ne
 80040a6:	81a3      	strhne	r3, [r4, #12]
 80040a8:	bd10      	pop	{r4, pc}

080040aa <__sclose>:
 80040aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040ae:	f000 b813 	b.w	80040d8 <_close_r>
	...

080040b4 <_write_r>:
 80040b4:	b538      	push	{r3, r4, r5, lr}
 80040b6:	4d07      	ldr	r5, [pc, #28]	; (80040d4 <_write_r+0x20>)
 80040b8:	4604      	mov	r4, r0
 80040ba:	4608      	mov	r0, r1
 80040bc:	4611      	mov	r1, r2
 80040be:	2200      	movs	r2, #0
 80040c0:	602a      	str	r2, [r5, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	f7fd f815 	bl	80010f2 <_write>
 80040c8:	1c43      	adds	r3, r0, #1
 80040ca:	d102      	bne.n	80040d2 <_write_r+0x1e>
 80040cc:	682b      	ldr	r3, [r5, #0]
 80040ce:	b103      	cbz	r3, 80040d2 <_write_r+0x1e>
 80040d0:	6023      	str	r3, [r4, #0]
 80040d2:	bd38      	pop	{r3, r4, r5, pc}
 80040d4:	2000029c 	.word	0x2000029c

080040d8 <_close_r>:
 80040d8:	b538      	push	{r3, r4, r5, lr}
 80040da:	4d06      	ldr	r5, [pc, #24]	; (80040f4 <_close_r+0x1c>)
 80040dc:	2300      	movs	r3, #0
 80040de:	4604      	mov	r4, r0
 80040e0:	4608      	mov	r0, r1
 80040e2:	602b      	str	r3, [r5, #0]
 80040e4:	f7fd f821 	bl	800112a <_close>
 80040e8:	1c43      	adds	r3, r0, #1
 80040ea:	d102      	bne.n	80040f2 <_close_r+0x1a>
 80040ec:	682b      	ldr	r3, [r5, #0]
 80040ee:	b103      	cbz	r3, 80040f2 <_close_r+0x1a>
 80040f0:	6023      	str	r3, [r4, #0]
 80040f2:	bd38      	pop	{r3, r4, r5, pc}
 80040f4:	2000029c 	.word	0x2000029c

080040f8 <_lseek_r>:
 80040f8:	b538      	push	{r3, r4, r5, lr}
 80040fa:	4d07      	ldr	r5, [pc, #28]	; (8004118 <_lseek_r+0x20>)
 80040fc:	4604      	mov	r4, r0
 80040fe:	4608      	mov	r0, r1
 8004100:	4611      	mov	r1, r2
 8004102:	2200      	movs	r2, #0
 8004104:	602a      	str	r2, [r5, #0]
 8004106:	461a      	mov	r2, r3
 8004108:	f7fd f836 	bl	8001178 <_lseek>
 800410c:	1c43      	adds	r3, r0, #1
 800410e:	d102      	bne.n	8004116 <_lseek_r+0x1e>
 8004110:	682b      	ldr	r3, [r5, #0]
 8004112:	b103      	cbz	r3, 8004116 <_lseek_r+0x1e>
 8004114:	6023      	str	r3, [r4, #0]
 8004116:	bd38      	pop	{r3, r4, r5, pc}
 8004118:	2000029c 	.word	0x2000029c

0800411c <__malloc_lock>:
 800411c:	4801      	ldr	r0, [pc, #4]	; (8004124 <__malloc_lock+0x8>)
 800411e:	f7ff bea8 	b.w	8003e72 <__retarget_lock_acquire_recursive>
 8004122:	bf00      	nop
 8004124:	20000294 	.word	0x20000294

08004128 <__malloc_unlock>:
 8004128:	4801      	ldr	r0, [pc, #4]	; (8004130 <__malloc_unlock+0x8>)
 800412a:	f7ff bea3 	b.w	8003e74 <__retarget_lock_release_recursive>
 800412e:	bf00      	nop
 8004130:	20000294 	.word	0x20000294

08004134 <__sfputc_r>:
 8004134:	6893      	ldr	r3, [r2, #8]
 8004136:	3b01      	subs	r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	b410      	push	{r4}
 800413c:	6093      	str	r3, [r2, #8]
 800413e:	da08      	bge.n	8004152 <__sfputc_r+0x1e>
 8004140:	6994      	ldr	r4, [r2, #24]
 8004142:	42a3      	cmp	r3, r4
 8004144:	db01      	blt.n	800414a <__sfputc_r+0x16>
 8004146:	290a      	cmp	r1, #10
 8004148:	d103      	bne.n	8004152 <__sfputc_r+0x1e>
 800414a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800414e:	f000 baf1 	b.w	8004734 <__swbuf_r>
 8004152:	6813      	ldr	r3, [r2, #0]
 8004154:	1c58      	adds	r0, r3, #1
 8004156:	6010      	str	r0, [r2, #0]
 8004158:	7019      	strb	r1, [r3, #0]
 800415a:	4608      	mov	r0, r1
 800415c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004160:	4770      	bx	lr

08004162 <__sfputs_r>:
 8004162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004164:	4606      	mov	r6, r0
 8004166:	460f      	mov	r7, r1
 8004168:	4614      	mov	r4, r2
 800416a:	18d5      	adds	r5, r2, r3
 800416c:	42ac      	cmp	r4, r5
 800416e:	d101      	bne.n	8004174 <__sfputs_r+0x12>
 8004170:	2000      	movs	r0, #0
 8004172:	e007      	b.n	8004184 <__sfputs_r+0x22>
 8004174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004178:	463a      	mov	r2, r7
 800417a:	4630      	mov	r0, r6
 800417c:	f7ff ffda 	bl	8004134 <__sfputc_r>
 8004180:	1c43      	adds	r3, r0, #1
 8004182:	d1f3      	bne.n	800416c <__sfputs_r+0xa>
 8004184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004188 <_vfiprintf_r>:
 8004188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800418c:	460d      	mov	r5, r1
 800418e:	b09d      	sub	sp, #116	; 0x74
 8004190:	4614      	mov	r4, r2
 8004192:	4698      	mov	r8, r3
 8004194:	4606      	mov	r6, r0
 8004196:	b118      	cbz	r0, 80041a0 <_vfiprintf_r+0x18>
 8004198:	6983      	ldr	r3, [r0, #24]
 800419a:	b90b      	cbnz	r3, 80041a0 <_vfiprintf_r+0x18>
 800419c:	f7ff fda6 	bl	8003cec <__sinit>
 80041a0:	4b89      	ldr	r3, [pc, #548]	; (80043c8 <_vfiprintf_r+0x240>)
 80041a2:	429d      	cmp	r5, r3
 80041a4:	d11b      	bne.n	80041de <_vfiprintf_r+0x56>
 80041a6:	6875      	ldr	r5, [r6, #4]
 80041a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041aa:	07d9      	lsls	r1, r3, #31
 80041ac:	d405      	bmi.n	80041ba <_vfiprintf_r+0x32>
 80041ae:	89ab      	ldrh	r3, [r5, #12]
 80041b0:	059a      	lsls	r2, r3, #22
 80041b2:	d402      	bmi.n	80041ba <_vfiprintf_r+0x32>
 80041b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041b6:	f7ff fe5c 	bl	8003e72 <__retarget_lock_acquire_recursive>
 80041ba:	89ab      	ldrh	r3, [r5, #12]
 80041bc:	071b      	lsls	r3, r3, #28
 80041be:	d501      	bpl.n	80041c4 <_vfiprintf_r+0x3c>
 80041c0:	692b      	ldr	r3, [r5, #16]
 80041c2:	b9eb      	cbnz	r3, 8004200 <_vfiprintf_r+0x78>
 80041c4:	4629      	mov	r1, r5
 80041c6:	4630      	mov	r0, r6
 80041c8:	f000 fb06 	bl	80047d8 <__swsetup_r>
 80041cc:	b1c0      	cbz	r0, 8004200 <_vfiprintf_r+0x78>
 80041ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041d0:	07dc      	lsls	r4, r3, #31
 80041d2:	d50e      	bpl.n	80041f2 <_vfiprintf_r+0x6a>
 80041d4:	f04f 30ff 	mov.w	r0, #4294967295
 80041d8:	b01d      	add	sp, #116	; 0x74
 80041da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041de:	4b7b      	ldr	r3, [pc, #492]	; (80043cc <_vfiprintf_r+0x244>)
 80041e0:	429d      	cmp	r5, r3
 80041e2:	d101      	bne.n	80041e8 <_vfiprintf_r+0x60>
 80041e4:	68b5      	ldr	r5, [r6, #8]
 80041e6:	e7df      	b.n	80041a8 <_vfiprintf_r+0x20>
 80041e8:	4b79      	ldr	r3, [pc, #484]	; (80043d0 <_vfiprintf_r+0x248>)
 80041ea:	429d      	cmp	r5, r3
 80041ec:	bf08      	it	eq
 80041ee:	68f5      	ldreq	r5, [r6, #12]
 80041f0:	e7da      	b.n	80041a8 <_vfiprintf_r+0x20>
 80041f2:	89ab      	ldrh	r3, [r5, #12]
 80041f4:	0598      	lsls	r0, r3, #22
 80041f6:	d4ed      	bmi.n	80041d4 <_vfiprintf_r+0x4c>
 80041f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041fa:	f7ff fe3b 	bl	8003e74 <__retarget_lock_release_recursive>
 80041fe:	e7e9      	b.n	80041d4 <_vfiprintf_r+0x4c>
 8004200:	2300      	movs	r3, #0
 8004202:	9309      	str	r3, [sp, #36]	; 0x24
 8004204:	2320      	movs	r3, #32
 8004206:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800420a:	f8cd 800c 	str.w	r8, [sp, #12]
 800420e:	2330      	movs	r3, #48	; 0x30
 8004210:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80043d4 <_vfiprintf_r+0x24c>
 8004214:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004218:	f04f 0901 	mov.w	r9, #1
 800421c:	4623      	mov	r3, r4
 800421e:	469a      	mov	sl, r3
 8004220:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004224:	b10a      	cbz	r2, 800422a <_vfiprintf_r+0xa2>
 8004226:	2a25      	cmp	r2, #37	; 0x25
 8004228:	d1f9      	bne.n	800421e <_vfiprintf_r+0x96>
 800422a:	ebba 0b04 	subs.w	fp, sl, r4
 800422e:	d00b      	beq.n	8004248 <_vfiprintf_r+0xc0>
 8004230:	465b      	mov	r3, fp
 8004232:	4622      	mov	r2, r4
 8004234:	4629      	mov	r1, r5
 8004236:	4630      	mov	r0, r6
 8004238:	f7ff ff93 	bl	8004162 <__sfputs_r>
 800423c:	3001      	adds	r0, #1
 800423e:	f000 80aa 	beq.w	8004396 <_vfiprintf_r+0x20e>
 8004242:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004244:	445a      	add	r2, fp
 8004246:	9209      	str	r2, [sp, #36]	; 0x24
 8004248:	f89a 3000 	ldrb.w	r3, [sl]
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 80a2 	beq.w	8004396 <_vfiprintf_r+0x20e>
 8004252:	2300      	movs	r3, #0
 8004254:	f04f 32ff 	mov.w	r2, #4294967295
 8004258:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800425c:	f10a 0a01 	add.w	sl, sl, #1
 8004260:	9304      	str	r3, [sp, #16]
 8004262:	9307      	str	r3, [sp, #28]
 8004264:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004268:	931a      	str	r3, [sp, #104]	; 0x68
 800426a:	4654      	mov	r4, sl
 800426c:	2205      	movs	r2, #5
 800426e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004272:	4858      	ldr	r0, [pc, #352]	; (80043d4 <_vfiprintf_r+0x24c>)
 8004274:	f7fb ffcc 	bl	8000210 <memchr>
 8004278:	9a04      	ldr	r2, [sp, #16]
 800427a:	b9d8      	cbnz	r0, 80042b4 <_vfiprintf_r+0x12c>
 800427c:	06d1      	lsls	r1, r2, #27
 800427e:	bf44      	itt	mi
 8004280:	2320      	movmi	r3, #32
 8004282:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004286:	0713      	lsls	r3, r2, #28
 8004288:	bf44      	itt	mi
 800428a:	232b      	movmi	r3, #43	; 0x2b
 800428c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004290:	f89a 3000 	ldrb.w	r3, [sl]
 8004294:	2b2a      	cmp	r3, #42	; 0x2a
 8004296:	d015      	beq.n	80042c4 <_vfiprintf_r+0x13c>
 8004298:	9a07      	ldr	r2, [sp, #28]
 800429a:	4654      	mov	r4, sl
 800429c:	2000      	movs	r0, #0
 800429e:	f04f 0c0a 	mov.w	ip, #10
 80042a2:	4621      	mov	r1, r4
 80042a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042a8:	3b30      	subs	r3, #48	; 0x30
 80042aa:	2b09      	cmp	r3, #9
 80042ac:	d94e      	bls.n	800434c <_vfiprintf_r+0x1c4>
 80042ae:	b1b0      	cbz	r0, 80042de <_vfiprintf_r+0x156>
 80042b0:	9207      	str	r2, [sp, #28]
 80042b2:	e014      	b.n	80042de <_vfiprintf_r+0x156>
 80042b4:	eba0 0308 	sub.w	r3, r0, r8
 80042b8:	fa09 f303 	lsl.w	r3, r9, r3
 80042bc:	4313      	orrs	r3, r2
 80042be:	9304      	str	r3, [sp, #16]
 80042c0:	46a2      	mov	sl, r4
 80042c2:	e7d2      	b.n	800426a <_vfiprintf_r+0xe2>
 80042c4:	9b03      	ldr	r3, [sp, #12]
 80042c6:	1d19      	adds	r1, r3, #4
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	9103      	str	r1, [sp, #12]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	bfbb      	ittet	lt
 80042d0:	425b      	neglt	r3, r3
 80042d2:	f042 0202 	orrlt.w	r2, r2, #2
 80042d6:	9307      	strge	r3, [sp, #28]
 80042d8:	9307      	strlt	r3, [sp, #28]
 80042da:	bfb8      	it	lt
 80042dc:	9204      	strlt	r2, [sp, #16]
 80042de:	7823      	ldrb	r3, [r4, #0]
 80042e0:	2b2e      	cmp	r3, #46	; 0x2e
 80042e2:	d10c      	bne.n	80042fe <_vfiprintf_r+0x176>
 80042e4:	7863      	ldrb	r3, [r4, #1]
 80042e6:	2b2a      	cmp	r3, #42	; 0x2a
 80042e8:	d135      	bne.n	8004356 <_vfiprintf_r+0x1ce>
 80042ea:	9b03      	ldr	r3, [sp, #12]
 80042ec:	1d1a      	adds	r2, r3, #4
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	9203      	str	r2, [sp, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	bfb8      	it	lt
 80042f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80042fa:	3402      	adds	r4, #2
 80042fc:	9305      	str	r3, [sp, #20]
 80042fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80043e4 <_vfiprintf_r+0x25c>
 8004302:	7821      	ldrb	r1, [r4, #0]
 8004304:	2203      	movs	r2, #3
 8004306:	4650      	mov	r0, sl
 8004308:	f7fb ff82 	bl	8000210 <memchr>
 800430c:	b140      	cbz	r0, 8004320 <_vfiprintf_r+0x198>
 800430e:	2340      	movs	r3, #64	; 0x40
 8004310:	eba0 000a 	sub.w	r0, r0, sl
 8004314:	fa03 f000 	lsl.w	r0, r3, r0
 8004318:	9b04      	ldr	r3, [sp, #16]
 800431a:	4303      	orrs	r3, r0
 800431c:	3401      	adds	r4, #1
 800431e:	9304      	str	r3, [sp, #16]
 8004320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004324:	482c      	ldr	r0, [pc, #176]	; (80043d8 <_vfiprintf_r+0x250>)
 8004326:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800432a:	2206      	movs	r2, #6
 800432c:	f7fb ff70 	bl	8000210 <memchr>
 8004330:	2800      	cmp	r0, #0
 8004332:	d03f      	beq.n	80043b4 <_vfiprintf_r+0x22c>
 8004334:	4b29      	ldr	r3, [pc, #164]	; (80043dc <_vfiprintf_r+0x254>)
 8004336:	bb1b      	cbnz	r3, 8004380 <_vfiprintf_r+0x1f8>
 8004338:	9b03      	ldr	r3, [sp, #12]
 800433a:	3307      	adds	r3, #7
 800433c:	f023 0307 	bic.w	r3, r3, #7
 8004340:	3308      	adds	r3, #8
 8004342:	9303      	str	r3, [sp, #12]
 8004344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004346:	443b      	add	r3, r7
 8004348:	9309      	str	r3, [sp, #36]	; 0x24
 800434a:	e767      	b.n	800421c <_vfiprintf_r+0x94>
 800434c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004350:	460c      	mov	r4, r1
 8004352:	2001      	movs	r0, #1
 8004354:	e7a5      	b.n	80042a2 <_vfiprintf_r+0x11a>
 8004356:	2300      	movs	r3, #0
 8004358:	3401      	adds	r4, #1
 800435a:	9305      	str	r3, [sp, #20]
 800435c:	4619      	mov	r1, r3
 800435e:	f04f 0c0a 	mov.w	ip, #10
 8004362:	4620      	mov	r0, r4
 8004364:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004368:	3a30      	subs	r2, #48	; 0x30
 800436a:	2a09      	cmp	r2, #9
 800436c:	d903      	bls.n	8004376 <_vfiprintf_r+0x1ee>
 800436e:	2b00      	cmp	r3, #0
 8004370:	d0c5      	beq.n	80042fe <_vfiprintf_r+0x176>
 8004372:	9105      	str	r1, [sp, #20]
 8004374:	e7c3      	b.n	80042fe <_vfiprintf_r+0x176>
 8004376:	fb0c 2101 	mla	r1, ip, r1, r2
 800437a:	4604      	mov	r4, r0
 800437c:	2301      	movs	r3, #1
 800437e:	e7f0      	b.n	8004362 <_vfiprintf_r+0x1da>
 8004380:	ab03      	add	r3, sp, #12
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	462a      	mov	r2, r5
 8004386:	4b16      	ldr	r3, [pc, #88]	; (80043e0 <_vfiprintf_r+0x258>)
 8004388:	a904      	add	r1, sp, #16
 800438a:	4630      	mov	r0, r6
 800438c:	f3af 8000 	nop.w
 8004390:	4607      	mov	r7, r0
 8004392:	1c78      	adds	r0, r7, #1
 8004394:	d1d6      	bne.n	8004344 <_vfiprintf_r+0x1bc>
 8004396:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004398:	07d9      	lsls	r1, r3, #31
 800439a:	d405      	bmi.n	80043a8 <_vfiprintf_r+0x220>
 800439c:	89ab      	ldrh	r3, [r5, #12]
 800439e:	059a      	lsls	r2, r3, #22
 80043a0:	d402      	bmi.n	80043a8 <_vfiprintf_r+0x220>
 80043a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043a4:	f7ff fd66 	bl	8003e74 <__retarget_lock_release_recursive>
 80043a8:	89ab      	ldrh	r3, [r5, #12]
 80043aa:	065b      	lsls	r3, r3, #25
 80043ac:	f53f af12 	bmi.w	80041d4 <_vfiprintf_r+0x4c>
 80043b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043b2:	e711      	b.n	80041d8 <_vfiprintf_r+0x50>
 80043b4:	ab03      	add	r3, sp, #12
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	462a      	mov	r2, r5
 80043ba:	4b09      	ldr	r3, [pc, #36]	; (80043e0 <_vfiprintf_r+0x258>)
 80043bc:	a904      	add	r1, sp, #16
 80043be:	4630      	mov	r0, r6
 80043c0:	f000 f880 	bl	80044c4 <_printf_i>
 80043c4:	e7e4      	b.n	8004390 <_vfiprintf_r+0x208>
 80043c6:	bf00      	nop
 80043c8:	08004a74 	.word	0x08004a74
 80043cc:	08004a94 	.word	0x08004a94
 80043d0:	08004a54 	.word	0x08004a54
 80043d4:	08004ab8 	.word	0x08004ab8
 80043d8:	08004ac2 	.word	0x08004ac2
 80043dc:	00000000 	.word	0x00000000
 80043e0:	08004163 	.word	0x08004163
 80043e4:	08004abe 	.word	0x08004abe

080043e8 <_printf_common>:
 80043e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043ec:	4616      	mov	r6, r2
 80043ee:	4699      	mov	r9, r3
 80043f0:	688a      	ldr	r2, [r1, #8]
 80043f2:	690b      	ldr	r3, [r1, #16]
 80043f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043f8:	4293      	cmp	r3, r2
 80043fa:	bfb8      	it	lt
 80043fc:	4613      	movlt	r3, r2
 80043fe:	6033      	str	r3, [r6, #0]
 8004400:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004404:	4607      	mov	r7, r0
 8004406:	460c      	mov	r4, r1
 8004408:	b10a      	cbz	r2, 800440e <_printf_common+0x26>
 800440a:	3301      	adds	r3, #1
 800440c:	6033      	str	r3, [r6, #0]
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	0699      	lsls	r1, r3, #26
 8004412:	bf42      	ittt	mi
 8004414:	6833      	ldrmi	r3, [r6, #0]
 8004416:	3302      	addmi	r3, #2
 8004418:	6033      	strmi	r3, [r6, #0]
 800441a:	6825      	ldr	r5, [r4, #0]
 800441c:	f015 0506 	ands.w	r5, r5, #6
 8004420:	d106      	bne.n	8004430 <_printf_common+0x48>
 8004422:	f104 0a19 	add.w	sl, r4, #25
 8004426:	68e3      	ldr	r3, [r4, #12]
 8004428:	6832      	ldr	r2, [r6, #0]
 800442a:	1a9b      	subs	r3, r3, r2
 800442c:	42ab      	cmp	r3, r5
 800442e:	dc26      	bgt.n	800447e <_printf_common+0x96>
 8004430:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004434:	1e13      	subs	r3, r2, #0
 8004436:	6822      	ldr	r2, [r4, #0]
 8004438:	bf18      	it	ne
 800443a:	2301      	movne	r3, #1
 800443c:	0692      	lsls	r2, r2, #26
 800443e:	d42b      	bmi.n	8004498 <_printf_common+0xb0>
 8004440:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004444:	4649      	mov	r1, r9
 8004446:	4638      	mov	r0, r7
 8004448:	47c0      	blx	r8
 800444a:	3001      	adds	r0, #1
 800444c:	d01e      	beq.n	800448c <_printf_common+0xa4>
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	68e5      	ldr	r5, [r4, #12]
 8004452:	6832      	ldr	r2, [r6, #0]
 8004454:	f003 0306 	and.w	r3, r3, #6
 8004458:	2b04      	cmp	r3, #4
 800445a:	bf08      	it	eq
 800445c:	1aad      	subeq	r5, r5, r2
 800445e:	68a3      	ldr	r3, [r4, #8]
 8004460:	6922      	ldr	r2, [r4, #16]
 8004462:	bf0c      	ite	eq
 8004464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004468:	2500      	movne	r5, #0
 800446a:	4293      	cmp	r3, r2
 800446c:	bfc4      	itt	gt
 800446e:	1a9b      	subgt	r3, r3, r2
 8004470:	18ed      	addgt	r5, r5, r3
 8004472:	2600      	movs	r6, #0
 8004474:	341a      	adds	r4, #26
 8004476:	42b5      	cmp	r5, r6
 8004478:	d11a      	bne.n	80044b0 <_printf_common+0xc8>
 800447a:	2000      	movs	r0, #0
 800447c:	e008      	b.n	8004490 <_printf_common+0xa8>
 800447e:	2301      	movs	r3, #1
 8004480:	4652      	mov	r2, sl
 8004482:	4649      	mov	r1, r9
 8004484:	4638      	mov	r0, r7
 8004486:	47c0      	blx	r8
 8004488:	3001      	adds	r0, #1
 800448a:	d103      	bne.n	8004494 <_printf_common+0xac>
 800448c:	f04f 30ff 	mov.w	r0, #4294967295
 8004490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004494:	3501      	adds	r5, #1
 8004496:	e7c6      	b.n	8004426 <_printf_common+0x3e>
 8004498:	18e1      	adds	r1, r4, r3
 800449a:	1c5a      	adds	r2, r3, #1
 800449c:	2030      	movs	r0, #48	; 0x30
 800449e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044a2:	4422      	add	r2, r4
 80044a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044ac:	3302      	adds	r3, #2
 80044ae:	e7c7      	b.n	8004440 <_printf_common+0x58>
 80044b0:	2301      	movs	r3, #1
 80044b2:	4622      	mov	r2, r4
 80044b4:	4649      	mov	r1, r9
 80044b6:	4638      	mov	r0, r7
 80044b8:	47c0      	blx	r8
 80044ba:	3001      	adds	r0, #1
 80044bc:	d0e6      	beq.n	800448c <_printf_common+0xa4>
 80044be:	3601      	adds	r6, #1
 80044c0:	e7d9      	b.n	8004476 <_printf_common+0x8e>
	...

080044c4 <_printf_i>:
 80044c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044c8:	460c      	mov	r4, r1
 80044ca:	4691      	mov	r9, r2
 80044cc:	7e27      	ldrb	r7, [r4, #24]
 80044ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80044d0:	2f78      	cmp	r7, #120	; 0x78
 80044d2:	4680      	mov	r8, r0
 80044d4:	469a      	mov	sl, r3
 80044d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044da:	d807      	bhi.n	80044ec <_printf_i+0x28>
 80044dc:	2f62      	cmp	r7, #98	; 0x62
 80044de:	d80a      	bhi.n	80044f6 <_printf_i+0x32>
 80044e0:	2f00      	cmp	r7, #0
 80044e2:	f000 80d8 	beq.w	8004696 <_printf_i+0x1d2>
 80044e6:	2f58      	cmp	r7, #88	; 0x58
 80044e8:	f000 80a3 	beq.w	8004632 <_printf_i+0x16e>
 80044ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80044f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044f4:	e03a      	b.n	800456c <_printf_i+0xa8>
 80044f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044fa:	2b15      	cmp	r3, #21
 80044fc:	d8f6      	bhi.n	80044ec <_printf_i+0x28>
 80044fe:	a001      	add	r0, pc, #4	; (adr r0, 8004504 <_printf_i+0x40>)
 8004500:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004504:	0800455d 	.word	0x0800455d
 8004508:	08004571 	.word	0x08004571
 800450c:	080044ed 	.word	0x080044ed
 8004510:	080044ed 	.word	0x080044ed
 8004514:	080044ed 	.word	0x080044ed
 8004518:	080044ed 	.word	0x080044ed
 800451c:	08004571 	.word	0x08004571
 8004520:	080044ed 	.word	0x080044ed
 8004524:	080044ed 	.word	0x080044ed
 8004528:	080044ed 	.word	0x080044ed
 800452c:	080044ed 	.word	0x080044ed
 8004530:	0800467d 	.word	0x0800467d
 8004534:	080045a1 	.word	0x080045a1
 8004538:	0800465f 	.word	0x0800465f
 800453c:	080044ed 	.word	0x080044ed
 8004540:	080044ed 	.word	0x080044ed
 8004544:	0800469f 	.word	0x0800469f
 8004548:	080044ed 	.word	0x080044ed
 800454c:	080045a1 	.word	0x080045a1
 8004550:	080044ed 	.word	0x080044ed
 8004554:	080044ed 	.word	0x080044ed
 8004558:	08004667 	.word	0x08004667
 800455c:	680b      	ldr	r3, [r1, #0]
 800455e:	1d1a      	adds	r2, r3, #4
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	600a      	str	r2, [r1, #0]
 8004564:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004568:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800456c:	2301      	movs	r3, #1
 800456e:	e0a3      	b.n	80046b8 <_printf_i+0x1f4>
 8004570:	6825      	ldr	r5, [r4, #0]
 8004572:	6808      	ldr	r0, [r1, #0]
 8004574:	062e      	lsls	r6, r5, #24
 8004576:	f100 0304 	add.w	r3, r0, #4
 800457a:	d50a      	bpl.n	8004592 <_printf_i+0xce>
 800457c:	6805      	ldr	r5, [r0, #0]
 800457e:	600b      	str	r3, [r1, #0]
 8004580:	2d00      	cmp	r5, #0
 8004582:	da03      	bge.n	800458c <_printf_i+0xc8>
 8004584:	232d      	movs	r3, #45	; 0x2d
 8004586:	426d      	negs	r5, r5
 8004588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800458c:	485e      	ldr	r0, [pc, #376]	; (8004708 <_printf_i+0x244>)
 800458e:	230a      	movs	r3, #10
 8004590:	e019      	b.n	80045c6 <_printf_i+0x102>
 8004592:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004596:	6805      	ldr	r5, [r0, #0]
 8004598:	600b      	str	r3, [r1, #0]
 800459a:	bf18      	it	ne
 800459c:	b22d      	sxthne	r5, r5
 800459e:	e7ef      	b.n	8004580 <_printf_i+0xbc>
 80045a0:	680b      	ldr	r3, [r1, #0]
 80045a2:	6825      	ldr	r5, [r4, #0]
 80045a4:	1d18      	adds	r0, r3, #4
 80045a6:	6008      	str	r0, [r1, #0]
 80045a8:	0628      	lsls	r0, r5, #24
 80045aa:	d501      	bpl.n	80045b0 <_printf_i+0xec>
 80045ac:	681d      	ldr	r5, [r3, #0]
 80045ae:	e002      	b.n	80045b6 <_printf_i+0xf2>
 80045b0:	0669      	lsls	r1, r5, #25
 80045b2:	d5fb      	bpl.n	80045ac <_printf_i+0xe8>
 80045b4:	881d      	ldrh	r5, [r3, #0]
 80045b6:	4854      	ldr	r0, [pc, #336]	; (8004708 <_printf_i+0x244>)
 80045b8:	2f6f      	cmp	r7, #111	; 0x6f
 80045ba:	bf0c      	ite	eq
 80045bc:	2308      	moveq	r3, #8
 80045be:	230a      	movne	r3, #10
 80045c0:	2100      	movs	r1, #0
 80045c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045c6:	6866      	ldr	r6, [r4, #4]
 80045c8:	60a6      	str	r6, [r4, #8]
 80045ca:	2e00      	cmp	r6, #0
 80045cc:	bfa2      	ittt	ge
 80045ce:	6821      	ldrge	r1, [r4, #0]
 80045d0:	f021 0104 	bicge.w	r1, r1, #4
 80045d4:	6021      	strge	r1, [r4, #0]
 80045d6:	b90d      	cbnz	r5, 80045dc <_printf_i+0x118>
 80045d8:	2e00      	cmp	r6, #0
 80045da:	d04d      	beq.n	8004678 <_printf_i+0x1b4>
 80045dc:	4616      	mov	r6, r2
 80045de:	fbb5 f1f3 	udiv	r1, r5, r3
 80045e2:	fb03 5711 	mls	r7, r3, r1, r5
 80045e6:	5dc7      	ldrb	r7, [r0, r7]
 80045e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045ec:	462f      	mov	r7, r5
 80045ee:	42bb      	cmp	r3, r7
 80045f0:	460d      	mov	r5, r1
 80045f2:	d9f4      	bls.n	80045de <_printf_i+0x11a>
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d10b      	bne.n	8004610 <_printf_i+0x14c>
 80045f8:	6823      	ldr	r3, [r4, #0]
 80045fa:	07df      	lsls	r7, r3, #31
 80045fc:	d508      	bpl.n	8004610 <_printf_i+0x14c>
 80045fe:	6923      	ldr	r3, [r4, #16]
 8004600:	6861      	ldr	r1, [r4, #4]
 8004602:	4299      	cmp	r1, r3
 8004604:	bfde      	ittt	le
 8004606:	2330      	movle	r3, #48	; 0x30
 8004608:	f806 3c01 	strble.w	r3, [r6, #-1]
 800460c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004610:	1b92      	subs	r2, r2, r6
 8004612:	6122      	str	r2, [r4, #16]
 8004614:	f8cd a000 	str.w	sl, [sp]
 8004618:	464b      	mov	r3, r9
 800461a:	aa03      	add	r2, sp, #12
 800461c:	4621      	mov	r1, r4
 800461e:	4640      	mov	r0, r8
 8004620:	f7ff fee2 	bl	80043e8 <_printf_common>
 8004624:	3001      	adds	r0, #1
 8004626:	d14c      	bne.n	80046c2 <_printf_i+0x1fe>
 8004628:	f04f 30ff 	mov.w	r0, #4294967295
 800462c:	b004      	add	sp, #16
 800462e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004632:	4835      	ldr	r0, [pc, #212]	; (8004708 <_printf_i+0x244>)
 8004634:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004638:	6823      	ldr	r3, [r4, #0]
 800463a:	680e      	ldr	r6, [r1, #0]
 800463c:	061f      	lsls	r7, r3, #24
 800463e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004642:	600e      	str	r6, [r1, #0]
 8004644:	d514      	bpl.n	8004670 <_printf_i+0x1ac>
 8004646:	07d9      	lsls	r1, r3, #31
 8004648:	bf44      	itt	mi
 800464a:	f043 0320 	orrmi.w	r3, r3, #32
 800464e:	6023      	strmi	r3, [r4, #0]
 8004650:	b91d      	cbnz	r5, 800465a <_printf_i+0x196>
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	f023 0320 	bic.w	r3, r3, #32
 8004658:	6023      	str	r3, [r4, #0]
 800465a:	2310      	movs	r3, #16
 800465c:	e7b0      	b.n	80045c0 <_printf_i+0xfc>
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	f043 0320 	orr.w	r3, r3, #32
 8004664:	6023      	str	r3, [r4, #0]
 8004666:	2378      	movs	r3, #120	; 0x78
 8004668:	4828      	ldr	r0, [pc, #160]	; (800470c <_printf_i+0x248>)
 800466a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800466e:	e7e3      	b.n	8004638 <_printf_i+0x174>
 8004670:	065e      	lsls	r6, r3, #25
 8004672:	bf48      	it	mi
 8004674:	b2ad      	uxthmi	r5, r5
 8004676:	e7e6      	b.n	8004646 <_printf_i+0x182>
 8004678:	4616      	mov	r6, r2
 800467a:	e7bb      	b.n	80045f4 <_printf_i+0x130>
 800467c:	680b      	ldr	r3, [r1, #0]
 800467e:	6826      	ldr	r6, [r4, #0]
 8004680:	6960      	ldr	r0, [r4, #20]
 8004682:	1d1d      	adds	r5, r3, #4
 8004684:	600d      	str	r5, [r1, #0]
 8004686:	0635      	lsls	r5, r6, #24
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	d501      	bpl.n	8004690 <_printf_i+0x1cc>
 800468c:	6018      	str	r0, [r3, #0]
 800468e:	e002      	b.n	8004696 <_printf_i+0x1d2>
 8004690:	0671      	lsls	r1, r6, #25
 8004692:	d5fb      	bpl.n	800468c <_printf_i+0x1c8>
 8004694:	8018      	strh	r0, [r3, #0]
 8004696:	2300      	movs	r3, #0
 8004698:	6123      	str	r3, [r4, #16]
 800469a:	4616      	mov	r6, r2
 800469c:	e7ba      	b.n	8004614 <_printf_i+0x150>
 800469e:	680b      	ldr	r3, [r1, #0]
 80046a0:	1d1a      	adds	r2, r3, #4
 80046a2:	600a      	str	r2, [r1, #0]
 80046a4:	681e      	ldr	r6, [r3, #0]
 80046a6:	6862      	ldr	r2, [r4, #4]
 80046a8:	2100      	movs	r1, #0
 80046aa:	4630      	mov	r0, r6
 80046ac:	f7fb fdb0 	bl	8000210 <memchr>
 80046b0:	b108      	cbz	r0, 80046b6 <_printf_i+0x1f2>
 80046b2:	1b80      	subs	r0, r0, r6
 80046b4:	6060      	str	r0, [r4, #4]
 80046b6:	6863      	ldr	r3, [r4, #4]
 80046b8:	6123      	str	r3, [r4, #16]
 80046ba:	2300      	movs	r3, #0
 80046bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046c0:	e7a8      	b.n	8004614 <_printf_i+0x150>
 80046c2:	6923      	ldr	r3, [r4, #16]
 80046c4:	4632      	mov	r2, r6
 80046c6:	4649      	mov	r1, r9
 80046c8:	4640      	mov	r0, r8
 80046ca:	47d0      	blx	sl
 80046cc:	3001      	adds	r0, #1
 80046ce:	d0ab      	beq.n	8004628 <_printf_i+0x164>
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	079b      	lsls	r3, r3, #30
 80046d4:	d413      	bmi.n	80046fe <_printf_i+0x23a>
 80046d6:	68e0      	ldr	r0, [r4, #12]
 80046d8:	9b03      	ldr	r3, [sp, #12]
 80046da:	4298      	cmp	r0, r3
 80046dc:	bfb8      	it	lt
 80046de:	4618      	movlt	r0, r3
 80046e0:	e7a4      	b.n	800462c <_printf_i+0x168>
 80046e2:	2301      	movs	r3, #1
 80046e4:	4632      	mov	r2, r6
 80046e6:	4649      	mov	r1, r9
 80046e8:	4640      	mov	r0, r8
 80046ea:	47d0      	blx	sl
 80046ec:	3001      	adds	r0, #1
 80046ee:	d09b      	beq.n	8004628 <_printf_i+0x164>
 80046f0:	3501      	adds	r5, #1
 80046f2:	68e3      	ldr	r3, [r4, #12]
 80046f4:	9903      	ldr	r1, [sp, #12]
 80046f6:	1a5b      	subs	r3, r3, r1
 80046f8:	42ab      	cmp	r3, r5
 80046fa:	dcf2      	bgt.n	80046e2 <_printf_i+0x21e>
 80046fc:	e7eb      	b.n	80046d6 <_printf_i+0x212>
 80046fe:	2500      	movs	r5, #0
 8004700:	f104 0619 	add.w	r6, r4, #25
 8004704:	e7f5      	b.n	80046f2 <_printf_i+0x22e>
 8004706:	bf00      	nop
 8004708:	08004ac9 	.word	0x08004ac9
 800470c:	08004ada 	.word	0x08004ada

08004710 <_read_r>:
 8004710:	b538      	push	{r3, r4, r5, lr}
 8004712:	4d07      	ldr	r5, [pc, #28]	; (8004730 <_read_r+0x20>)
 8004714:	4604      	mov	r4, r0
 8004716:	4608      	mov	r0, r1
 8004718:	4611      	mov	r1, r2
 800471a:	2200      	movs	r2, #0
 800471c:	602a      	str	r2, [r5, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	f7fc fcca 	bl	80010b8 <_read>
 8004724:	1c43      	adds	r3, r0, #1
 8004726:	d102      	bne.n	800472e <_read_r+0x1e>
 8004728:	682b      	ldr	r3, [r5, #0]
 800472a:	b103      	cbz	r3, 800472e <_read_r+0x1e>
 800472c:	6023      	str	r3, [r4, #0]
 800472e:	bd38      	pop	{r3, r4, r5, pc}
 8004730:	2000029c 	.word	0x2000029c

08004734 <__swbuf_r>:
 8004734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004736:	460e      	mov	r6, r1
 8004738:	4614      	mov	r4, r2
 800473a:	4605      	mov	r5, r0
 800473c:	b118      	cbz	r0, 8004746 <__swbuf_r+0x12>
 800473e:	6983      	ldr	r3, [r0, #24]
 8004740:	b90b      	cbnz	r3, 8004746 <__swbuf_r+0x12>
 8004742:	f7ff fad3 	bl	8003cec <__sinit>
 8004746:	4b21      	ldr	r3, [pc, #132]	; (80047cc <__swbuf_r+0x98>)
 8004748:	429c      	cmp	r4, r3
 800474a:	d12b      	bne.n	80047a4 <__swbuf_r+0x70>
 800474c:	686c      	ldr	r4, [r5, #4]
 800474e:	69a3      	ldr	r3, [r4, #24]
 8004750:	60a3      	str	r3, [r4, #8]
 8004752:	89a3      	ldrh	r3, [r4, #12]
 8004754:	071a      	lsls	r2, r3, #28
 8004756:	d52f      	bpl.n	80047b8 <__swbuf_r+0x84>
 8004758:	6923      	ldr	r3, [r4, #16]
 800475a:	b36b      	cbz	r3, 80047b8 <__swbuf_r+0x84>
 800475c:	6923      	ldr	r3, [r4, #16]
 800475e:	6820      	ldr	r0, [r4, #0]
 8004760:	1ac0      	subs	r0, r0, r3
 8004762:	6963      	ldr	r3, [r4, #20]
 8004764:	b2f6      	uxtb	r6, r6
 8004766:	4283      	cmp	r3, r0
 8004768:	4637      	mov	r7, r6
 800476a:	dc04      	bgt.n	8004776 <__swbuf_r+0x42>
 800476c:	4621      	mov	r1, r4
 800476e:	4628      	mov	r0, r5
 8004770:	f7ff fa16 	bl	8003ba0 <_fflush_r>
 8004774:	bb30      	cbnz	r0, 80047c4 <__swbuf_r+0x90>
 8004776:	68a3      	ldr	r3, [r4, #8]
 8004778:	3b01      	subs	r3, #1
 800477a:	60a3      	str	r3, [r4, #8]
 800477c:	6823      	ldr	r3, [r4, #0]
 800477e:	1c5a      	adds	r2, r3, #1
 8004780:	6022      	str	r2, [r4, #0]
 8004782:	701e      	strb	r6, [r3, #0]
 8004784:	6963      	ldr	r3, [r4, #20]
 8004786:	3001      	adds	r0, #1
 8004788:	4283      	cmp	r3, r0
 800478a:	d004      	beq.n	8004796 <__swbuf_r+0x62>
 800478c:	89a3      	ldrh	r3, [r4, #12]
 800478e:	07db      	lsls	r3, r3, #31
 8004790:	d506      	bpl.n	80047a0 <__swbuf_r+0x6c>
 8004792:	2e0a      	cmp	r6, #10
 8004794:	d104      	bne.n	80047a0 <__swbuf_r+0x6c>
 8004796:	4621      	mov	r1, r4
 8004798:	4628      	mov	r0, r5
 800479a:	f7ff fa01 	bl	8003ba0 <_fflush_r>
 800479e:	b988      	cbnz	r0, 80047c4 <__swbuf_r+0x90>
 80047a0:	4638      	mov	r0, r7
 80047a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047a4:	4b0a      	ldr	r3, [pc, #40]	; (80047d0 <__swbuf_r+0x9c>)
 80047a6:	429c      	cmp	r4, r3
 80047a8:	d101      	bne.n	80047ae <__swbuf_r+0x7a>
 80047aa:	68ac      	ldr	r4, [r5, #8]
 80047ac:	e7cf      	b.n	800474e <__swbuf_r+0x1a>
 80047ae:	4b09      	ldr	r3, [pc, #36]	; (80047d4 <__swbuf_r+0xa0>)
 80047b0:	429c      	cmp	r4, r3
 80047b2:	bf08      	it	eq
 80047b4:	68ec      	ldreq	r4, [r5, #12]
 80047b6:	e7ca      	b.n	800474e <__swbuf_r+0x1a>
 80047b8:	4621      	mov	r1, r4
 80047ba:	4628      	mov	r0, r5
 80047bc:	f000 f80c 	bl	80047d8 <__swsetup_r>
 80047c0:	2800      	cmp	r0, #0
 80047c2:	d0cb      	beq.n	800475c <__swbuf_r+0x28>
 80047c4:	f04f 37ff 	mov.w	r7, #4294967295
 80047c8:	e7ea      	b.n	80047a0 <__swbuf_r+0x6c>
 80047ca:	bf00      	nop
 80047cc:	08004a74 	.word	0x08004a74
 80047d0:	08004a94 	.word	0x08004a94
 80047d4:	08004a54 	.word	0x08004a54

080047d8 <__swsetup_r>:
 80047d8:	4b32      	ldr	r3, [pc, #200]	; (80048a4 <__swsetup_r+0xcc>)
 80047da:	b570      	push	{r4, r5, r6, lr}
 80047dc:	681d      	ldr	r5, [r3, #0]
 80047de:	4606      	mov	r6, r0
 80047e0:	460c      	mov	r4, r1
 80047e2:	b125      	cbz	r5, 80047ee <__swsetup_r+0x16>
 80047e4:	69ab      	ldr	r3, [r5, #24]
 80047e6:	b913      	cbnz	r3, 80047ee <__swsetup_r+0x16>
 80047e8:	4628      	mov	r0, r5
 80047ea:	f7ff fa7f 	bl	8003cec <__sinit>
 80047ee:	4b2e      	ldr	r3, [pc, #184]	; (80048a8 <__swsetup_r+0xd0>)
 80047f0:	429c      	cmp	r4, r3
 80047f2:	d10f      	bne.n	8004814 <__swsetup_r+0x3c>
 80047f4:	686c      	ldr	r4, [r5, #4]
 80047f6:	89a3      	ldrh	r3, [r4, #12]
 80047f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047fc:	0719      	lsls	r1, r3, #28
 80047fe:	d42c      	bmi.n	800485a <__swsetup_r+0x82>
 8004800:	06dd      	lsls	r5, r3, #27
 8004802:	d411      	bmi.n	8004828 <__swsetup_r+0x50>
 8004804:	2309      	movs	r3, #9
 8004806:	6033      	str	r3, [r6, #0]
 8004808:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800480c:	81a3      	strh	r3, [r4, #12]
 800480e:	f04f 30ff 	mov.w	r0, #4294967295
 8004812:	e03e      	b.n	8004892 <__swsetup_r+0xba>
 8004814:	4b25      	ldr	r3, [pc, #148]	; (80048ac <__swsetup_r+0xd4>)
 8004816:	429c      	cmp	r4, r3
 8004818:	d101      	bne.n	800481e <__swsetup_r+0x46>
 800481a:	68ac      	ldr	r4, [r5, #8]
 800481c:	e7eb      	b.n	80047f6 <__swsetup_r+0x1e>
 800481e:	4b24      	ldr	r3, [pc, #144]	; (80048b0 <__swsetup_r+0xd8>)
 8004820:	429c      	cmp	r4, r3
 8004822:	bf08      	it	eq
 8004824:	68ec      	ldreq	r4, [r5, #12]
 8004826:	e7e6      	b.n	80047f6 <__swsetup_r+0x1e>
 8004828:	0758      	lsls	r0, r3, #29
 800482a:	d512      	bpl.n	8004852 <__swsetup_r+0x7a>
 800482c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800482e:	b141      	cbz	r1, 8004842 <__swsetup_r+0x6a>
 8004830:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004834:	4299      	cmp	r1, r3
 8004836:	d002      	beq.n	800483e <__swsetup_r+0x66>
 8004838:	4630      	mov	r0, r6
 800483a:	f7ff fb25 	bl	8003e88 <_free_r>
 800483e:	2300      	movs	r3, #0
 8004840:	6363      	str	r3, [r4, #52]	; 0x34
 8004842:	89a3      	ldrh	r3, [r4, #12]
 8004844:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004848:	81a3      	strh	r3, [r4, #12]
 800484a:	2300      	movs	r3, #0
 800484c:	6063      	str	r3, [r4, #4]
 800484e:	6923      	ldr	r3, [r4, #16]
 8004850:	6023      	str	r3, [r4, #0]
 8004852:	89a3      	ldrh	r3, [r4, #12]
 8004854:	f043 0308 	orr.w	r3, r3, #8
 8004858:	81a3      	strh	r3, [r4, #12]
 800485a:	6923      	ldr	r3, [r4, #16]
 800485c:	b94b      	cbnz	r3, 8004872 <__swsetup_r+0x9a>
 800485e:	89a3      	ldrh	r3, [r4, #12]
 8004860:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004868:	d003      	beq.n	8004872 <__swsetup_r+0x9a>
 800486a:	4621      	mov	r1, r4
 800486c:	4630      	mov	r0, r6
 800486e:	f000 f845 	bl	80048fc <__smakebuf_r>
 8004872:	89a0      	ldrh	r0, [r4, #12]
 8004874:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004878:	f010 0301 	ands.w	r3, r0, #1
 800487c:	d00a      	beq.n	8004894 <__swsetup_r+0xbc>
 800487e:	2300      	movs	r3, #0
 8004880:	60a3      	str	r3, [r4, #8]
 8004882:	6963      	ldr	r3, [r4, #20]
 8004884:	425b      	negs	r3, r3
 8004886:	61a3      	str	r3, [r4, #24]
 8004888:	6923      	ldr	r3, [r4, #16]
 800488a:	b943      	cbnz	r3, 800489e <__swsetup_r+0xc6>
 800488c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004890:	d1ba      	bne.n	8004808 <__swsetup_r+0x30>
 8004892:	bd70      	pop	{r4, r5, r6, pc}
 8004894:	0781      	lsls	r1, r0, #30
 8004896:	bf58      	it	pl
 8004898:	6963      	ldrpl	r3, [r4, #20]
 800489a:	60a3      	str	r3, [r4, #8]
 800489c:	e7f4      	b.n	8004888 <__swsetup_r+0xb0>
 800489e:	2000      	movs	r0, #0
 80048a0:	e7f7      	b.n	8004892 <__swsetup_r+0xba>
 80048a2:	bf00      	nop
 80048a4:	2000000c 	.word	0x2000000c
 80048a8:	08004a74 	.word	0x08004a74
 80048ac:	08004a94 	.word	0x08004a94
 80048b0:	08004a54 	.word	0x08004a54

080048b4 <__swhatbuf_r>:
 80048b4:	b570      	push	{r4, r5, r6, lr}
 80048b6:	460e      	mov	r6, r1
 80048b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048bc:	2900      	cmp	r1, #0
 80048be:	b096      	sub	sp, #88	; 0x58
 80048c0:	4614      	mov	r4, r2
 80048c2:	461d      	mov	r5, r3
 80048c4:	da07      	bge.n	80048d6 <__swhatbuf_r+0x22>
 80048c6:	2300      	movs	r3, #0
 80048c8:	602b      	str	r3, [r5, #0]
 80048ca:	89b3      	ldrh	r3, [r6, #12]
 80048cc:	061a      	lsls	r2, r3, #24
 80048ce:	d410      	bmi.n	80048f2 <__swhatbuf_r+0x3e>
 80048d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048d4:	e00e      	b.n	80048f4 <__swhatbuf_r+0x40>
 80048d6:	466a      	mov	r2, sp
 80048d8:	f000 f850 	bl	800497c <_fstat_r>
 80048dc:	2800      	cmp	r0, #0
 80048de:	dbf2      	blt.n	80048c6 <__swhatbuf_r+0x12>
 80048e0:	9a01      	ldr	r2, [sp, #4]
 80048e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80048e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80048ea:	425a      	negs	r2, r3
 80048ec:	415a      	adcs	r2, r3
 80048ee:	602a      	str	r2, [r5, #0]
 80048f0:	e7ee      	b.n	80048d0 <__swhatbuf_r+0x1c>
 80048f2:	2340      	movs	r3, #64	; 0x40
 80048f4:	2000      	movs	r0, #0
 80048f6:	6023      	str	r3, [r4, #0]
 80048f8:	b016      	add	sp, #88	; 0x58
 80048fa:	bd70      	pop	{r4, r5, r6, pc}

080048fc <__smakebuf_r>:
 80048fc:	898b      	ldrh	r3, [r1, #12]
 80048fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004900:	079d      	lsls	r5, r3, #30
 8004902:	4606      	mov	r6, r0
 8004904:	460c      	mov	r4, r1
 8004906:	d507      	bpl.n	8004918 <__smakebuf_r+0x1c>
 8004908:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800490c:	6023      	str	r3, [r4, #0]
 800490e:	6123      	str	r3, [r4, #16]
 8004910:	2301      	movs	r3, #1
 8004912:	6163      	str	r3, [r4, #20]
 8004914:	b002      	add	sp, #8
 8004916:	bd70      	pop	{r4, r5, r6, pc}
 8004918:	ab01      	add	r3, sp, #4
 800491a:	466a      	mov	r2, sp
 800491c:	f7ff ffca 	bl	80048b4 <__swhatbuf_r>
 8004920:	9900      	ldr	r1, [sp, #0]
 8004922:	4605      	mov	r5, r0
 8004924:	4630      	mov	r0, r6
 8004926:	f7ff faff 	bl	8003f28 <_malloc_r>
 800492a:	b948      	cbnz	r0, 8004940 <__smakebuf_r+0x44>
 800492c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004930:	059a      	lsls	r2, r3, #22
 8004932:	d4ef      	bmi.n	8004914 <__smakebuf_r+0x18>
 8004934:	f023 0303 	bic.w	r3, r3, #3
 8004938:	f043 0302 	orr.w	r3, r3, #2
 800493c:	81a3      	strh	r3, [r4, #12]
 800493e:	e7e3      	b.n	8004908 <__smakebuf_r+0xc>
 8004940:	4b0d      	ldr	r3, [pc, #52]	; (8004978 <__smakebuf_r+0x7c>)
 8004942:	62b3      	str	r3, [r6, #40]	; 0x28
 8004944:	89a3      	ldrh	r3, [r4, #12]
 8004946:	6020      	str	r0, [r4, #0]
 8004948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800494c:	81a3      	strh	r3, [r4, #12]
 800494e:	9b00      	ldr	r3, [sp, #0]
 8004950:	6163      	str	r3, [r4, #20]
 8004952:	9b01      	ldr	r3, [sp, #4]
 8004954:	6120      	str	r0, [r4, #16]
 8004956:	b15b      	cbz	r3, 8004970 <__smakebuf_r+0x74>
 8004958:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800495c:	4630      	mov	r0, r6
 800495e:	f000 f81f 	bl	80049a0 <_isatty_r>
 8004962:	b128      	cbz	r0, 8004970 <__smakebuf_r+0x74>
 8004964:	89a3      	ldrh	r3, [r4, #12]
 8004966:	f023 0303 	bic.w	r3, r3, #3
 800496a:	f043 0301 	orr.w	r3, r3, #1
 800496e:	81a3      	strh	r3, [r4, #12]
 8004970:	89a0      	ldrh	r0, [r4, #12]
 8004972:	4305      	orrs	r5, r0
 8004974:	81a5      	strh	r5, [r4, #12]
 8004976:	e7cd      	b.n	8004914 <__smakebuf_r+0x18>
 8004978:	08003c85 	.word	0x08003c85

0800497c <_fstat_r>:
 800497c:	b538      	push	{r3, r4, r5, lr}
 800497e:	4d07      	ldr	r5, [pc, #28]	; (800499c <_fstat_r+0x20>)
 8004980:	2300      	movs	r3, #0
 8004982:	4604      	mov	r4, r0
 8004984:	4608      	mov	r0, r1
 8004986:	4611      	mov	r1, r2
 8004988:	602b      	str	r3, [r5, #0]
 800498a:	f7fc fbda 	bl	8001142 <_fstat>
 800498e:	1c43      	adds	r3, r0, #1
 8004990:	d102      	bne.n	8004998 <_fstat_r+0x1c>
 8004992:	682b      	ldr	r3, [r5, #0]
 8004994:	b103      	cbz	r3, 8004998 <_fstat_r+0x1c>
 8004996:	6023      	str	r3, [r4, #0]
 8004998:	bd38      	pop	{r3, r4, r5, pc}
 800499a:	bf00      	nop
 800499c:	2000029c 	.word	0x2000029c

080049a0 <_isatty_r>:
 80049a0:	b538      	push	{r3, r4, r5, lr}
 80049a2:	4d06      	ldr	r5, [pc, #24]	; (80049bc <_isatty_r+0x1c>)
 80049a4:	2300      	movs	r3, #0
 80049a6:	4604      	mov	r4, r0
 80049a8:	4608      	mov	r0, r1
 80049aa:	602b      	str	r3, [r5, #0]
 80049ac:	f7fc fbd9 	bl	8001162 <_isatty>
 80049b0:	1c43      	adds	r3, r0, #1
 80049b2:	d102      	bne.n	80049ba <_isatty_r+0x1a>
 80049b4:	682b      	ldr	r3, [r5, #0]
 80049b6:	b103      	cbz	r3, 80049ba <_isatty_r+0x1a>
 80049b8:	6023      	str	r3, [r4, #0]
 80049ba:	bd38      	pop	{r3, r4, r5, pc}
 80049bc:	2000029c 	.word	0x2000029c

080049c0 <_init>:
 80049c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c2:	bf00      	nop
 80049c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049c6:	bc08      	pop	{r3}
 80049c8:	469e      	mov	lr, r3
 80049ca:	4770      	bx	lr

080049cc <_fini>:
 80049cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ce:	bf00      	nop
 80049d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049d2:	bc08      	pop	{r3}
 80049d4:	469e      	mov	lr, r3
 80049d6:	4770      	bx	lr
